{"version":3,"sources":["../home/runner/work/react-sortablejs/react-sortablejs/node_modules/@parcel/scope-hoisting/lib/helpers.js","util.ts","react-sortable.tsx","../node_modules/react-sortablejs/node_modules/classnames/index.js","../../../utils/src/browser-info.ts","../../../utils/src/utils.ts","../../../sortable/src/PluginManager.ts","../../../sortable/src/EventDispatcher.ts","../../../sortable/src/Sortable.ts","../../../plugins/swap/src/index.ts","../../../sortable/src/Animation.ts","../../../plugins/multi-drag/src/index.ts","../../../plugins/on-spill/src/index.ts","../../../plugins/auto-scroll/src/index.ts","../../src/modular-complete.ts"],"names":["$parcel$interopDefault","a","__esModule","default","removeNode","node","parentElement","removeChild","removeNodes","customs","forEach","curr","element","insertNodes","parent","newChild","index","refChild","oldIndex","children","insertBefore","createCustoms","evt","list","mode","getMode","from","custom","item","newIndex","$bf037e368b3040002dda64d69d3f$var$_objectSpread","swapItem","oldIndicies","map","multiDragElement","newIndicies","inputs","sort","b","handleStateRemove","normalized","newList","$bf037e368b3040002dda64d69d3f$var$_toConsumableArray","concat","reverse","splice","handleStateAdd","clone","newItem","length","store","dragging","ReactSortable","Component","props","_this","ref","createRef","chosen","selected","setList","sortable","invariant","plugins","this","current","newOptions","makeOptions","Sortable","create","tag","classicProps","style","className","id","createElement","$ff006f4a88ed11a8119708ec3f19c5db$var$_objectSpread","getChildren","dataIdAttr","selectedClass","chosenClass","dragClass","fallbackClass","ghostClass","swapClass","filter","dataid","Children","child","prevClassName","filtered","$ff006f4a88ed11a8119708ec3f19c5db$var$_defineProperty","replace","classNames","cloneElement","key","onAdd","onChange","onChoose","onClone","onEnd","onFilter","onRemove","onSort","onStart","onUnchoose","onUpdate","onMove","onSpill","onSelect","onDeselect","$bf037e368b3040002dda64d69d3f$var$_objectWithoutProperties","name","_this2","prepareOnHandlerPropAndDOM","prepareOnHandlerProp","originalEvt","defaultValue","willInsertAfter","result","evtName","_this3","callOnHandlerProp","_this4","propEvent","$bf037e368b3040002dda64d69d3f$export$createCustoms","$ff006f4a88ed11a8119708ec3f19c5db$var$_toConsumableArray","$bf037e368b3040002dda64d69d3f$export$removeNodes","$bf037e368b3040002dda64d69d3f$export$handleStateAdd","$bf037e368b3040002dda64d69d3f$export$getMode","$bf037e368b3040002dda64d69d3f$export$insertNodes","pullMode","$bf037e368b3040002dda64d69d3f$export$handleStateRemove","customClones","clones","_this5","removeOnSpill","revertOnSpill","$bf037e368b3040002dda64d69d3f$export$removeNode","console","log","type","el","Object","keys","find","k","includes","hasOwn","hasOwnProperty","classes","i","arguments","arg","argType","push","Array","isArray","inner","apply","toString","prototype","call","join","module","exports","userAgent","pattern","window","navigator","match","IE11OrLess","Edge","FireFox","Safari","IOS","ChromeForAndroid","captureMode","capture","passive","on","event","fn","addEventListener","off","removeEventListener","matches","selector","substring","msMatchesSelector","webkitMatchesSelector","_","getParentOrHost","host","document","nodeType","parentNode","closest","ctx","includeCTX","_throttleTimeout","R_SPACE","toggleClass","state","classList","css","prop","val","defaultView","getComputedStyle","currentStyle","indexOf","matrix","selfOnly","appliedTransforms","transform","matrixFn","DOMMatrix","WebKitCSSMatrix","CSSMatrix","MSCSSMatrix","tagName","iterator","getElementsByTagName","n","getWindowScrollingElement","scrollingElement","documentElement","getRect","relativeToContainingBlock","relativeToNonStaticParent","undoScale","container","getBoundingClientRect","elRect","top","left","bottom","right","height","width","innerHeight","innerWidth","containerRect","parseInt","elMatrix","scaleX","scaleY","d","isScrolledPast","elSide","parentSide","getParentAutoScrollElement","elSideVal","parentSideVal","getChild","childNum","options","currentChild","display","ghost","dragged","draggable","lastChild","last","lastElementChild","previousElementSibling","nodeName","toUpperCase","getRelativeScrollOffset","offsetLeft","offsetTop","winScroller","scrollLeft","scrollTop","includeSelf","elem","gotSelf","clientWidth","scrollWidth","clientHeight","scrollHeight","elemCSS","overflowX","overflowY","body","isRectEqual","rect1","rect2","Math","round","throttle","callback","ms","args","setTimeout","scrollBy","x","y","Polymer","$","jQuery","Zepto","dom","cloneNode","setRect","rect","unsetRect","expando","Date","getTime","defaults","initializeByDefault","pluginManager","mount","plugin","option","pluginEvent","eventName","eventCanceled","cancel","eventNameGlobal","pluginName","initializePlugins","initialized","assign","modified","modifyOption","getEventProperties","eventProperties","value","modifiedValue","optionListeners","dispatchEvent","rootEl","targetEl","cloneEl","toEl","fromEl","oldDraggableIndex","newDraggableIndex","originalEvent","putSortable","extraEventProperties","onName","charAt","substr","CustomEvent","createEvent","initEvent","bubbles","cancelable","to","lastPutMode","allEventProperties","PluginManager","data","bind","dragEl","parentEl","ghostEl","nextEl","lastDownEl","cloneHidden","dragStarted","moved","activeSortable","active","hideGhostForTarget","_hideGhostForTarget","unhideGhostForTarget","_unhideGhostForTarget","cloneNowHidden","cloneNowShown","dispatchSortableEvent","_dispatchEvent","info","activeGroup","tapEvt","touchEvt","lastDx","lastDy","tapDistanceLeft","tapDistanceTop","lastTarget","lastDirection","targetMoveDistance","ghostRelativeParent","awaitingDragStarted","ignoreNextClick","sortables","pastFirstInvertThresh","isCircumstantialInvert","ghostRelativeParentInitialScroll","_silent","savedInputChecked","documentExists","PositionGhostAbsolutely","CSSFloatProperty","supportDraggable","supportCssPointerEvents","cssText","pointerEvents","_detectDirection","elCSS","elWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","child1","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginLeft","marginRight","secondChildWidth","flexDirection","gridTemplateColumns","split","clear","_prepareGroup","toFn","pull","group","otherGroup","originalGroup","checkPull","checkPut","put","revertClone","preventDefault","stopPropagation","stopImmediatePropagation","lastSwapEl","nearestEmptyInsertDetectEvent","nearest","touches","clientX","clientY","some","threshold","emptyInsertThreshold","ret","target","_onDragOver","_checkOutsideTargetEl","_isOutsideThisEl","animationCallbackId","animationStates","disabled","handle","test","swapThreshold","invertSwap","invertedSwapThreshold","removeCloneOnHide","direction","ignore","preventOnFilter","animation","easing","setData","dataTransfer","textContent","dropBubble","dragoverBubble","delay","delayOnTouchOnly","touchStartThreshold","Number","devicePixelRatio","forceFallback","fallbackOnBody","fallbackTolerance","fallbackOffset","supportPointer","nativeDraggable","_onTapStart","get","captureAnimationState","slice","fromRect","thisAnimationDuration","childMatrix","f","e","addAnimationState","removeAnimationState","arr","obj","animateAll","clearTimeout","animating","animationTime","time","toRect","prevFromRect","prevToRect","animatingRect","targetMatrix","sqrt","pow","animate","max","animationResetTimer","currentRect","duration","translateX","translateY","animatingX","animatingY","forRepaintDummy","offsetWidth","animated","dragRect","targetRect","retVal","onMoveFn","draggedRect","related","relatedRect","_disableDraggable","_unsilent","_generateId","str","src","href","sum","charCodeAt","_nextTick","_cancelNextTick","constructor","contains","_getDirection","touch","pointerType","originalTarget","shadowRoot","path","composedPath","root","idx","checked","button","isContentEditable","criteria","trim","_prepareDragStart","dragStartFn","ownerDocument","nextSibling","_lastX","_lastY","_onDrop","_disableDelayedDragEvents","_triggerDragStart","_disableDelayedDrag","_delayedDragTouchMoveHandler","_dragStartTimer","abs","floor","_onTouchMove","_onDragStart","selection","empty","getSelection","removeAllRanges","err","_dragStarted","fallback","_appendGhost","_nulling","_emulateDragOver","elementFromPoint","ghostMatrix","relativeScrollOffset","dx","dy","c","cssMatrix","appendChild","_hideClone","cloneId","_loopId","setInterval","effectAllowed","_dragStartId","revert","vertical","isOwner","canSort","fromSortable","completedFired","dragOverEvent","_ignoreWhileAnimating","completed","elLastChild","changed","targetBeforeFirstSwap","sibling","differentLevel","differentRowCol","dragElS1Opp","targetS1Opp","side1","scrolledPastTop","scrollBefore","isLastTarget","mouseOnAxis","targetLength","targetS1","targetS2","invert","dragIndex","nextElementSibling","after","moveVector","extra","axis","insertion","_showClone","_offMoveEvents","_offUpEvents","clearInterval","save","handleEvent","dropEffect","toArray","order","getAttribute","items","set","destroy","querySelectorAll","removeAttribute","utils","is","extend","dst","nextTick","cancelNextTick","detectDirection","version","lastMultiDragSelect","multiDragSortable","clonesFromRect","clonesHidden","multiDragElements","multiDragClones","initialFolding","folding","insertMultiDragClones","elementsInserted","sortableIndex","removeMultiDragElements","drop","toSortable","changedTouches","Revert","Remove","startIndex","dragStart","parentSortable","scrollEl","scrollRootEl","lastAutoScrollX","lastAutoScrollY","pointerElemChangedInterval","autoScrolls","scrolling","clearAutoScrolls","autoScroll","pid","clearPointerElemChangedInterval","isFallback","scroll","scrollCustomFn","sens","scrollSensitivity","speed","scrollSpeed","scrollThisInstance","scrollFn","layersOut","currentParent","canScrollX","canScrollY","scrollPosX","scrollPosY","vx","vy","layer","scrollOffsetY","scrollOffsetX","bubbleScroll","AutoScroll","_handleAutoScroll","_handleFallbackAutoScroll","dragOverCompleted","dragOverBubble","nulling","ogElemScroller","newElem","RemoveOnSpill","RevertOnSpill","Swap","dragOverValid","swap","prevSwapEl","n1","n2","i1","i2","p1","p2","isEqualNode","MultiDrag","_deselectMultiDrag","_checkKeyDown","_checkKeyUp","multiDragKey","multiDragKeyDown","isMultiDrag","delayStartGlobal","delayEnded","setupClone","t","showClone","hideClone","dragStartGlobal","multiDrag","dragOver","clonesInserted","dragRectAbsolute","clonesHiddenBefore","dragOverAnimationCapture","dragMatrix","dragOverAnimationComplete","shiftKey","lastIndex","currentIndex","multiDragIndex","update","nullingGlobal","destroyGlobal","shift","select","deselect","toLowerCase"],"mappings":"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","file":"static/js/12.3f0c82e3.chunk.js","sourcesContent":[null,"import { PropsWithChildren } from \"react\";\nimport Sortable, { Options } from \"sortablejs\";\nimport { MultiDragEvent } from \"./react-sortable\";\nimport { AllMethodNames, ItemInterface, ReactSortableProps } from \"./types\";\n\n/**\n * Removes the `node` from the DOM\n * @param node\n */\nexport function removeNode(node: HTMLElement): void {\n  if (node.parentElement !== null) node.parentElement.removeChild(node);\n}\n\n/**\n * Inserts the `newChild` node at the given index in a parent\n * @param parent The parent HTML Element.\n * @param newChild A HTML eement to add as a child of the parent.\n * @param index index of the parent to place the new child in.\n */\nexport function insertNodeAt(\n  parent: HTMLElement,\n  newChild: HTMLElement,\n  index: number\n): void {\n  const refChild = parent.children[index] || null;\n  parent.insertBefore(newChild, refChild);\n}\n\n// @todo - create a dom handler function for arrays or not at all\n\n/** removes stuff from the dom in a nice order */\n// @todo - do I need parenElement?\nexport function handleDOMChanges<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  removeNodes(customs);\n  insertNodes(customs);\n}\n\nexport function removeNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => removeNode(curr.element));\n}\n\nexport function insertNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => {\n    insertNodeAt(curr.parentElement, curr.element, curr.oldIndex);\n  });\n}\n\nexport function createCustoms<T extends ItemInterface>(\n  evt: MultiDragEvent,\n  list: T[]\n): Normalized<T>[] {\n  const mode = getMode(evt);\n  const parentElement = { parentElement: evt.from };\n  let custom = [];\n  switch (mode) {\n    case \"normal\":\n      /* eslint-disable */\n      const item = {\n        element: evt.item,\n        newIndex: evt.newIndex!,\n        oldIndex: evt.oldIndex!,\n        parentElement: evt.from,\n      };\n      custom = [item];\n      break;\n    case \"swap\":\n      const drag: Input = {\n        element: evt.item,\n        oldIndex: evt.oldIndex!,\n        newIndex: evt.newIndex!,\n        ...parentElement,\n      };\n      const swap: Input = {\n        element: evt.swapItem!,\n        oldIndex: evt.newIndex!,\n        newIndex: evt.oldIndex!,\n        ...parentElement,\n      };\n      custom = [drag, swap];\n      break;\n    case \"multidrag\":\n      custom = evt.oldIndicies.map<Input>((curr, index) => ({\n        element: curr.multiDragElement,\n        oldIndex: curr.index,\n        newIndex: evt.newIndicies[index].index,\n        ...parentElement,\n      }));\n      break;\n  }\n  /* eslint-enable */\n\n  const customs = createNormalized(custom, list);\n  return customs;\n}\n\n/** moves items form old index to new index without breaking anything ideally. */\nexport function handleStateChanges<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const a = handleStateRemove(normalized, list);\n  const b = handleStateAdd(normalized, a);\n  return b;\n}\n\nexport function handleStateRemove<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const newList = [...list];\n  normalized\n    .concat()\n    .reverse()\n    .forEach((curr) => newList.splice(curr.oldIndex, 1));\n  return newList;\n}\n\nexport function handleStateAdd<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[],\n  evt?: Sortable.SortableEvent,\n  clone?: ((currentItem: T, evt: Sortable.SortableEvent) => T) | undefined\n): T[] {\n  const newList = [...list];\n  normalized.forEach((curr) => {\n    const newItem = clone && evt && clone(curr.item, evt);\n    newList.splice(curr.newIndex, 0, newItem || curr.item);\n  });\n  return newList;\n}\n\nexport function getMode(evt: MultiDragEvent): \"multidrag\" | \"swap\" | \"normal\" {\n  if (evt.oldIndicies && evt.oldIndicies.length > 0) return \"multidrag\";\n  if (evt.swapItem) return \"swap\";\n  return \"normal\";\n}\n\nexport function createNormalized<T extends ItemInterface>(\n  inputs: Input[],\n  list: T[]\n): Normalized<T>[] {\n  const normalized = inputs\n    .map<Normalized<T>>((curr) => ({ ...curr, item: list[curr.oldIndex] }))\n    .sort((a, b) => a.oldIndex - b.oldIndex);\n  return normalized;\n}\n\nexport interface Input {\n  parentElement: HTMLElement;\n  element: HTMLElement;\n  oldIndex: number;\n  newIndex: number;\n}\n\nexport interface Normalized<T> extends Input {\n  item: T;\n}\n\n/**\n * Removes the following group of properties from `props`,\n * leaving only `Sortable.Options` without any `on` methods.\n * @param props `ReactSortable.Props`\n */\nexport function destructurePropsForOptions<T>(\n  props: PropsWithChildren<ReactSortableProps<T>>\n): Exclude<Options, AllMethodNames> {\n  /* eslint-disable */\n  const {\n    // react sortable props\n    list,\n    setList,\n    children,\n    tag,\n    style,\n    className,\n    clone,\n    // sortable options that have methods we want to overwrite\n    onAdd,\n    onChange,\n    onChoose,\n    onClone,\n    onEnd,\n    onFilter,\n    onRemove,\n    onSort,\n    onStart,\n    onUnchoose,\n    onUpdate,\n    onMove,\n    onSpill,\n    onSelect,\n    onDeselect,\n    ...options\n  } = props;\n  /* eslint-enable */\n  return options;\n}\n\n/**\n * Construct a type with the properties of T except for those in type K.\n * Including this allows for backwards compatibility with earlier versions of TS.\n */\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n","import classNames from \"classnames\";\nimport {\n  Children,\n  cloneElement,\n  Component,\n  createElement,\n  createRef,\n  ReactElement,\n  RefObject,\n} from \"react\";\nimport Sortable, { MoveEvent, Options, SortableEvent } from \"sortablejs\";\nimport invariant from \"tiny-invariant\";\nimport {\n  AllMethodsExceptMove,\n  HandledMethodNames,\n  ItemInterface,\n  ReactSortableProps,\n  Store,\n  UnHandledMethodNames,\n} from \"./types\";\nimport {\n  createCustoms,\n  destructurePropsForOptions,\n  getMode,\n  handleStateAdd,\n  handleStateChanges,\n  handleStateRemove,\n  insertNodes,\n  removeNode,\n  removeNodes,\n} from \"./util\";\n\n/** Holds a global reference for which react element is being dragged */\n// @todo - use context to manage this. How does one use 2 different providers?\nconst store: Store = { dragging: null };\n\nexport class ReactSortable<T extends ItemInterface> extends Component<\n  ReactSortableProps<T>\n> {\n  /* eslint-disable-next-line */\n  static defaultProps: Partial<ReactSortableProps<any>> = {\n    clone: (item) => item,\n  };\n\n  private ref: RefObject<HTMLElement>;\n  constructor(props: ReactSortableProps<T>) {\n    super(props);\n    // @todo forward ref this component\n    this.ref = createRef<HTMLElement>();\n\n    // make all state false because we can't change sortable unless a mouse gesture is made.\n    const newList = props.list.map((item) => ({\n      ...item,\n      chosen: false,\n      selected: false,\n    }));\n\n    props.setList(newList, this.sortable, store);\n    invariant(\n      //@ts-expect-error: Doesn't exist. Will deprecate soon.\n      !props.plugins,\n      `\nPlugins prop is no longer supported.\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\n      `\n    );\n  }\n  componentDidMount(): void {\n    if (this.ref.current === null) return;\n    const newOptions = this.makeOptions();\n    Sortable.create(this.ref.current, newOptions);\n  }\n\n  render(): JSX.Element {\n    const { tag, style, className, id } = this.props;\n    const classicProps = { style, className, id };\n\n    // if no tag, default to a `div` element.\n    const newTag = !tag || tag === null ? \"div\" : tag;\n    return createElement(\n      newTag,\n      {\n        // @todo - find a way (perhaps with the callback) to allow AntD components to work\n        ref: this.ref,\n        ...classicProps,\n      },\n      this.getChildren()\n    );\n  }\n\n  private getChildren() {\n    const {\n      children,\n      dataIdAttr,\n      selectedClass = \"sortable-selected\",\n      chosenClass = \"sortable-chosen\",\n      /* eslint-disable */\n      dragClass = \"sortable-drag\",\n      fallbackClass = \"sortable-falback\",\n      ghostClass = \"sortable-ghost\",\n      swapClass = \"sortable-swap-highlight\",\n      /* eslint-enable */\n      filter = \"sortable-filter\",\n      list,\n    } = this.props;\n\n    // if no children, don't do anything.\n    if (!children || children == null) return null;\n    const dataid = dataIdAttr || \"data-id\";\n    /* eslint-disable-next-line */\n    return Children.map(children as ReactElement<any>[], (child, index) => {\n      const item = list[index];\n      const { className: prevClassName } = child.props;\n\n      // @todo - handle the function if avalable. I don't think anyone will be doing this soon.\n      const filtered = typeof filter === \"string\" && {\n        [filter.replace(\".\", \"\")]: !!item.filtered,\n      };\n\n      const className = classNames(prevClassName, {\n        [selectedClass]: item.selected,\n        [chosenClass]: item.chosen,\n        ...filtered,\n        // [dragClass]: true,\n        // [fallbackClass]: true,\n        // [ghostClass]: true,\n        // [swapClass]: true\n      });\n\n      return cloneElement(child, {\n        [dataid]: child.key,\n        className,\n      });\n    });\n  }\n\n  /** Appends the `sortable` property to this component */\n  private get sortable(): Sortable | null {\n    const el = this.ref.current;\n    if (el === null) return null;\n    const key = Object.keys(el).find((k) => k.includes(\"Sortable\"));\n    if (!key) return null;\n    //@ts-expect-error: fix me.\n    return el[key] as Sortable;\n  }\n\n  /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */\n  makeOptions(): Options {\n    const DOMHandlers: HandledMethodNames[] = [\n      \"onAdd\",\n      \"onChoose\",\n      \"onDeselect\",\n      \"onEnd\",\n      \"onRemove\",\n      \"onSelect\",\n      \"onSpill\",\n      \"onStart\",\n      \"onUnchoose\",\n      \"onUpdate\",\n    ];\n    const NonDOMHandlers: UnHandledMethodNames[] = [\n      \"onChange\",\n      \"onClone\",\n      \"onFilter\",\n      \"onSort\",\n    ];\n    const newOptions: Options = destructurePropsForOptions(this.props);\n    DOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerPropAndDOM(name))\n    );\n    NonDOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerProp(name))\n    );\n\n    /** onMove has 2 arguments and needs to be handled seperately. */\n    const onMove = (evt: MoveEvent, originalEvt: Event) => {\n      const { onMove } = this.props;\n      const defaultValue = evt.willInsertAfter || -1;\n      if (!onMove) return defaultValue;\n      const result = onMove(evt, originalEvt, this.sortable, store);\n      if (typeof result === \"undefined\") return false;\n      return result;\n    };\n\n    return {\n      ...newOptions,\n      onMove,\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */\n  prepareOnHandlerPropAndDOM(\n    evtName: HandledMethodNames\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n      // calls state change\n      //@ts-expect-error: until @types multidrag item is in\n      this[evtName](evt);\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */\n  prepareOnHandlerProp(\n    evtName: Exclude<AllMethodsExceptMove, HandledMethodNames>\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n    };\n  }\n\n  /** Calls the `props.on[Handler]` function */\n  callOnHandlerProp(evt: SortableEvent, evtName: AllMethodsExceptMove): void {\n    const propEvent = this.props[evtName];\n    if (propEvent) propEvent(evt, this.sortable, store);\n  }\n\n  // SORTABLE DOM HANDLING\n\n  onAdd(evt: MultiDragEvent): void {\n    const { list, setList, clone } = this.props;\n    /* eslint-disable-next-line */\n    const otherList = [...store.dragging!.props.list];\n    const customs = createCustoms(evt, otherList);\n    removeNodes(customs);\n    const newList = handleStateAdd(customs, list, evt, clone).map((item) => ({\n      ...item,\n      selected: false,\n    }));\n    setList(newList, this.sortable, store);\n  }\n\n  onRemove(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const mode = getMode(evt);\n    const customs = createCustoms(evt, list);\n    insertNodes(customs);\n\n    let newList = [...list];\n    // remove state if not in clone mode. otherwise, keep.\n    if (evt.pullMode !== \"clone\") newList = handleStateRemove(customs, newList);\n    // if clone, it doesn't really remove. instead it clones in place.\n    // @todo -\n    else {\n      // switch used to get the clone\n      let customClones = customs;\n      switch (mode) {\n        case \"multidrag\":\n          customClones = customs.map((item, index) => ({\n            ...item,\n            element: evt.clones[index],\n          }));\n          break;\n        case \"normal\":\n          customClones = customs.map((item) => ({\n            ...item,\n            element: evt.clone,\n          }));\n          break;\n        case \"swap\":\n        default: {\n          invariant(\n            true,\n            `mode \"${mode}\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"${mode}\" plugin`\n          );\n        }\n      }\n      removeNodes(customClones);\n\n      // replace selected items with cloned items\n      customs.forEach((curr) => {\n        const index = curr.oldIndex;\n        /* eslint-disable-next-line */\n        const newItem = this.props.clone!(curr.item, evt);\n        newList.splice(index, 1, newItem);\n      });\n    }\n\n    // remove item.selected from list\n    newList = newList.map((item) => ({ ...item, selected: false }));\n    setList(newList, this.sortable, store);\n  }\n\n  onUpdate(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const customs = createCustoms(evt, list);\n    removeNodes(customs);\n    insertNodes(customs);\n    const newList = handleStateChanges(customs, list);\n    return setList(newList, this.sortable, store);\n  }\n\n  onStart(): void {\n    store.dragging = this;\n  }\n\n  onEnd(): void {\n    store.dragging = null;\n  }\n\n  onChoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: true,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onUnchoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: false,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onSpill(evt: SortableEvent): void {\n    const { removeOnSpill, revertOnSpill } = this.props;\n    if (removeOnSpill && !revertOnSpill) removeNode(evt.item);\n  }\n\n  onSelect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) {\n        console.log(\n          `\"${evt.type}\" had indice of \"${curr.index}\", which is probably -1 and doesn't usually happen here.`\n        );\n        console.log(evt);\n        return;\n      }\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onDeselect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) return;\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n}\n\n// everything below this point can be removed\n// once @types has been merged. PR submited\ninterface MultiIndices {\n  multiDragElement: HTMLElement;\n  index: number;\n}\n\nexport interface MultiDragEvent extends SortableEvent {\n  // @todo - add this to @types\n  clones: HTMLElement[];\n  oldIndicies: MultiIndices[];\n  newIndicies: MultiIndices[];\n  swapItem: HTMLElement | null;\n}\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","function userAgent(pattern) {\n  if (typeof window !== \"undefined\" && window.navigator) {\n    return !!(/*@__PURE__*/ navigator.userAgent.match(pattern));\n  }\n}\n\nexport const IE11OrLess = userAgent(\n  /(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i\n);\nexport const Edge = userAgent(/Edge/i);\nexport const FireFox = userAgent(/firefox/i);\nexport const Safari =\n  userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\nexport const IOS = userAgent(/iP(ad|od|hone)/i);\nexport const ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n","import { IE11OrLess } from \"./browser-info\";\nimport Sortable from \"../../sortable/src/Sortable\";\n\nconst captureMode = {\n  capture: false,\n  passive: false,\n};\n\nfunction on(el, event, fn) {\n  el.addEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction off(el, event, fn) {\n  el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction matches(/**HTMLElement*/ el, /**String*/ selector) {\n  if (!selector) return;\n\n  selector[0] === \">\" && (selector = selector.substring(1));\n\n  if (el) {\n    try {\n      if (el.matches) {\n        return el.matches(selector);\n      } else if (el.msMatchesSelector) {\n        return el.msMatchesSelector(selector);\n      } else if (el.webkitMatchesSelector) {\n        return el.webkitMatchesSelector(selector);\n      }\n    } catch (_) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentOrHost(el) {\n  return el.host && el !== document && el.host.nodeType\n    ? el.host\n    : el.parentNode;\n}\n\nfunction closest(\n  /**HTMLElement*/ el,\n  /**String*/ selector,\n  /**HTMLElement*/ ctx,\n  includeCTX\n) {\n  if (el) {\n    ctx = ctx || document;\n\n    do {\n      if (\n        (selector != null &&\n          (selector[0] === \">\"\n            ? el.parentNode === ctx && matches(el, selector)\n            : matches(el, selector))) ||\n        (includeCTX && el === ctx)\n      ) {\n        return el;\n      }\n\n      if (el === ctx) break;\n      /* jshint boss:true */\n    } while ((el = getParentOrHost(el)));\n  }\n\n  return null;\n}\n\nconst R_SPACE = /\\s+/g;\n\nfunction toggleClass(el, name, state) {\n  if (el && name) {\n    if (el.classList) {\n      el.classList[state ? \"add\" : \"remove\"](name);\n    } else {\n      let className = (\" \" + el.className + \" \")\n        .replace(R_SPACE, \" \")\n        .replace(\" \" + name + \" \", \" \");\n      el.className = (className + (state ? \" \" + name : \"\")).replace(\n        R_SPACE,\n        \" \"\n      );\n    }\n  }\n}\n\nfunction css(el, prop, val) {\n  let style = el && el.style;\n\n  if (style) {\n    if (val === void 0) {\n      if (document.defaultView && document.defaultView.getComputedStyle) {\n        val = document.defaultView.getComputedStyle(el, \"\");\n      } else if (el.currentStyle) {\n        val = el.currentStyle;\n      }\n\n      return prop === void 0 ? val : val[prop];\n    } else {\n      if (!(prop in style) && prop.indexOf(\"webkit\") === -1) {\n        prop = \"-webkit-\" + prop;\n      }\n\n      style[prop] = val + (typeof val === \"string\" ? \"\" : \"px\");\n    }\n  }\n}\n\nfunction matrix(el, selfOnly) {\n  let appliedTransforms = \"\";\n  if (typeof el === \"string\") {\n    appliedTransforms = el;\n  } else {\n    do {\n      //@ts-ignore\n      let transform = css(el, \"transform\");\n\n      if (transform && transform !== \"none\") {\n        appliedTransforms = transform + \" \" + appliedTransforms;\n      }\n      /* jshint boss:true */\n    } while (!selfOnly && (el = el.parentNode));\n  }\n\n  const matrixFn =\n    window.DOMMatrix ||\n    window.WebKitCSSMatrix ||\n    //@ts-ignore\n    window.CSSMatrix ||\n    //@ts-ignore\n    window.MSCSSMatrix;\n  /*jshint -W056 */\n  return matrixFn && new matrixFn(appliedTransforms);\n}\n\nfunction find(ctx, tagName, iterator) {\n  if (ctx) {\n    let list = ctx.getElementsByTagName(tagName),\n      i = 0,\n      n = list.length;\n\n    if (iterator) {\n      for (; i < n; i++) {\n        iterator(list[i], i);\n      }\n    }\n\n    return list;\n  }\n\n  return [];\n}\n\nfunction getWindowScrollingElement() {\n  let scrollingElement = document.scrollingElement;\n\n  if (scrollingElement) {\n    return scrollingElement;\n  } else {\n    return document.documentElement;\n  }\n}\n\n/**\n * Returns the \"bounding client rect\" of given element\n * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\n * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\n * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\n * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\n * @param  {[HTMLElement]} container              The parent the element will be placed in\n * @return {Object}                               The boundingClientRect of el, with specified adjustments\n */\nfunction getRect(\n  el,\n  relativeToContainingBlock,\n  relativeToNonStaticParent,\n  undoScale,\n  container\n) {\n  if (!el.getBoundingClientRect && el !== window) return;\n\n  let elRect, top, left, bottom, right, height, width;\n\n  if (el !== window && el !== getWindowScrollingElement()) {\n    elRect = el.getBoundingClientRect();\n    top = elRect.top;\n    left = elRect.left;\n    bottom = elRect.bottom;\n    right = elRect.right;\n    height = elRect.height;\n    width = elRect.width;\n  } else {\n    top = 0;\n    left = 0;\n    bottom = window.innerHeight;\n    right = window.innerWidth;\n    height = window.innerHeight;\n    width = window.innerWidth;\n  }\n\n  if (\n    (relativeToContainingBlock || relativeToNonStaticParent) &&\n    el !== window\n  ) {\n    // Adjust for translate()\n    container = container || el.parentNode;\n\n    // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n    // Not needed on <= IE11\n    if (!IE11OrLess) {\n      do {\n        if (\n          container &&\n          container.getBoundingClientRect &&\n          //@ts-ignore\n          (css(container, \"transform\") !== \"none\" ||\n            (relativeToNonStaticParent &&\n              //@ts-ignore\n              css(container, \"position\") !== \"static\"))\n        ) {\n          let containerRect = container.getBoundingClientRect();\n\n          // Set relative to edges of padding box of container\n          top -=\n            //@ts-ignore\n            containerRect.top + parseInt(css(container, \"border-top-width\"));\n          left -=\n            //@ts-ignore\n            containerRect.left + parseInt(css(container, \"border-left-width\"));\n          bottom = top + elRect.height;\n          right = left + elRect.width;\n\n          break;\n        }\n        /* jshint boss:true */\n      } while ((container = container.parentNode));\n    }\n  }\n\n  if (undoScale && el !== window) {\n    // Adjust for scale()\n    //@ts-ignore\n    let elMatrix = matrix(container || el),\n      scaleX = elMatrix && elMatrix.a,\n      scaleY = elMatrix && elMatrix.d;\n\n    if (elMatrix) {\n      top /= scaleY;\n      left /= scaleX;\n\n      width /= scaleX;\n      height /= scaleY;\n\n      bottom = top + height;\n      right = left + width;\n    }\n  }\n\n  return {\n    top: top,\n    left: left,\n    bottom: bottom,\n    right: right,\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Checks if a side of an element is scrolled past a side of its parents\n * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\n * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\n * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\n * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\n */\nfunction isScrolledPast(el, elSide, parentSide) {\n  let parent = getParentAutoScrollElement(el, true),\n    //@ts-ignore\n    elSideVal = getRect(el)[elSide];\n\n  /* jshint boss:true */\n  while (parent) {\n    //@ts-ignore\n    let parentSideVal = getRect(parent)[parentSide],\n      visible;\n\n    if (parentSide === \"top\" || parentSide === \"left\") {\n      visible = elSideVal >= parentSideVal;\n    } else {\n      visible = elSideVal <= parentSideVal;\n    }\n\n    if (!visible) return parent;\n\n    if (parent === getWindowScrollingElement()) break;\n\n    parent = getParentAutoScrollElement(parent, false);\n  }\n\n  return false;\n}\n\n/**\n * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n * and non-draggable elements\n * @param  {HTMLElement} el       The parent element\n * @param  {Number} childNum      The index of the child\n * @param  {Object} options       Parent Sortable's options\n * @return {HTMLElement}          The child at index childNum, or null if not found\n */\nfunction getChild(el, childNum, options) {\n  let currentChild = 0,\n    i = 0,\n    children = el.children;\n\n  while (i < children.length) {\n    if (\n      children[i].style.display !== \"none\" &&\n      //@ts-ignore\n      children[i] !== Sortable.ghost &&\n      //@ts-ignore\n      children[i] !== Sortable.dragged &&\n      closest(children[i], options.draggable, el, false)\n    ) {\n      if (currentChild === childNum) {\n        return children[i];\n      }\n      currentChild++;\n    }\n\n    i++;\n  }\n  return null;\n}\n\n/**\n * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n * @param  {HTMLElement} el       Parent element\n * @param  {selector} selector    Any other elements that should be ignored\n * @return {HTMLElement}          The last child, ignoring ghostEl\n */\nfunction lastChild(el, selector) {\n  let last = el.lastElementChild;\n\n  while (\n    last &&\n    //@ts-ignore\n    (last === Sortable.ghost ||\n      //@ts-ignore\n      css(last, \"display\") === \"none\" ||\n      (selector && !matches(last, selector)))\n  ) {\n    last = last.previousElementSibling;\n  }\n\n  return last || null;\n}\n\n/**\n * Returns the index of an element within its parent for a selected set of\n * elements\n * @param  {HTMLElement} el\n * @param  {selector} selector\n * @return {number}\n */\nfunction index(el, selector) {\n  let index = 0;\n\n  if (!el || !el.parentNode) {\n    return -1;\n  }\n\n  /* jshint boss:true */\n  while ((el = el.previousElementSibling)) {\n    if (\n      el.nodeName.toUpperCase() !== \"TEMPLATE\" &&\n      //@ts-ignore\n      el !== Sortable.clone &&\n      (!selector || matches(el, selector))\n    ) {\n      index++;\n    }\n  }\n\n  return index;\n}\n\n/**\n * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n * The value is returned in real pixels.\n * @param  {HTMLElement} el\n * @return {Array}             Offsets in the format of [left, top]\n */\nfunction getRelativeScrollOffset(el) {\n  let offsetLeft = 0,\n    offsetTop = 0,\n    winScroller = getWindowScrollingElement();\n\n  if (el) {\n    do {\n      //@ts-ignore\n      let elMatrix = matrix(el),\n        scaleX = elMatrix.a,\n        scaleY = elMatrix.d;\n\n      offsetLeft += el.scrollLeft * scaleX;\n      offsetTop += el.scrollTop * scaleY;\n    } while (el !== winScroller && (el = el.parentNode));\n  }\n\n  return [offsetLeft, offsetTop];\n}\n\n/**\n * Returns the index of the object within the given array\n * @param  {Array} arr   Array that may or may not hold the object\n * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\n * @return {Number}      The index of the object in the array, or -1\n */\nfunction indexOfObject(arr, obj) {\n  for (let i in arr) {\n    if (!arr.hasOwnProperty(i)) continue;\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n    }\n  }\n  return -1;\n}\n\nfunction getParentAutoScrollElement(el, includeSelf) {\n  // skip to window\n  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n\n  let elem = el;\n  let gotSelf = false;\n  do {\n    // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n    if (\n      elem.clientWidth < elem.scrollWidth ||\n      elem.clientHeight < elem.scrollHeight\n    ) {\n      //@ts-ignore\n      let elemCSS = css(elem);\n      if (\n        (elem.clientWidth < elem.scrollWidth &&\n          (elemCSS.overflowX == \"auto\" || elemCSS.overflowX == \"scroll\")) ||\n        (elem.clientHeight < elem.scrollHeight &&\n          (elemCSS.overflowY == \"auto\" || elemCSS.overflowY == \"scroll\"))\n      ) {\n        if (!elem.getBoundingClientRect || elem === document.body)\n          return getWindowScrollingElement();\n\n        if (gotSelf || includeSelf) return elem;\n        gotSelf = true;\n      }\n    }\n    /* jshint boss:true */\n  } while ((elem = elem.parentNode));\n\n  return getWindowScrollingElement();\n}\n\nfunction extend(dst, src) {\n  if (dst && src) {\n    for (let key in src) {\n      if (src.hasOwnProperty(key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n}\n\nfunction isRectEqual(rect1, rect2) {\n  return (\n    Math.round(rect1.top) === Math.round(rect2.top) &&\n    Math.round(rect1.left) === Math.round(rect2.left) &&\n    Math.round(rect1.height) === Math.round(rect2.height) &&\n    Math.round(rect1.width) === Math.round(rect2.width)\n  );\n}\n\nlet _throttleTimeout;\nfunction throttle(callback, ms) {\n  return function () {\n    if (!_throttleTimeout) {\n      let args = arguments,\n        _this = this;\n\n      if (args.length === 1) {\n        callback.call(_this, args[0]);\n      } else {\n        callback.apply(_this, args);\n      }\n\n      _throttleTimeout = setTimeout(function () {\n        _throttleTimeout = void 0;\n      }, ms);\n    }\n  };\n}\n\nfunction cancelThrottle() {\n  clearTimeout(_throttleTimeout);\n  _throttleTimeout = void 0;\n}\n\nfunction scrollBy(el, x, y) {\n  el.scrollLeft += x;\n  el.scrollTop += y;\n}\n\nfunction clone(el) {\n  //@ts-ignore\n  let Polymer = window.Polymer;\n  //@ts-ignore\n  let $ = window.jQuery || window.Zepto;\n\n  if (Polymer && Polymer.dom) {\n    return Polymer.dom(el).cloneNode(true);\n  } else if ($) {\n    return $(el).clone(true)[0];\n  } else {\n    return el.cloneNode(true);\n  }\n}\n\nfunction setRect(el, rect) {\n  css(el, \"position\", \"absolute\");\n  css(el, \"top\", rect.top);\n  css(el, \"left\", rect.left);\n  css(el, \"width\", rect.width);\n  css(el, \"height\", rect.height);\n}\n\nfunction unsetRect(el) {\n  css(el, \"position\", \"\");\n  css(el, \"top\", \"\");\n  css(el, \"left\", \"\");\n  css(el, \"width\", \"\");\n  css(el, \"height\", \"\");\n}\n\nconst expando = \"Sortable\" + new Date().getTime();\n\nexport {\n  on,\n  off,\n  matches,\n  getParentOrHost,\n  closest,\n  toggleClass,\n  css,\n  matrix,\n  find,\n  getWindowScrollingElement,\n  getRect,\n  isScrolledPast,\n  getChild,\n  lastChild,\n  index,\n  getRelativeScrollOffset,\n  indexOfObject,\n  getParentAutoScrollElement,\n  extend,\n  isRectEqual,\n  throttle,\n  cancelThrottle,\n  scrollBy,\n  clone,\n  setRect,\n  unsetRect,\n  expando,\n};\n","let plugins = [];\n\nconst defaults = {\n  initializeByDefault: true,\n};\n\nconst pluginManager = {\n  mount(plugin) {\n    // Set default static properties\n    for (let option in defaults) {\n      if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n        plugin[option] = defaults[option];\n      }\n    }\n    plugins.push(plugin);\n  },\n  pluginEvent(eventName, sortable, evt) {\n    this.eventCanceled = false;\n    evt.cancel = () => {\n      this.eventCanceled = true;\n    };\n    const eventNameGlobal = eventName + \"Global\";\n    plugins.forEach((plugin) => {\n      if (!sortable[plugin.pluginName]) return;\n      // Fire global events if it exists in this sortable\n      if (sortable[plugin.pluginName][eventNameGlobal]) {\n        sortable[plugin.pluginName][eventNameGlobal]({ sortable, ...evt });\n      }\n\n      // Only fire plugin event if plugin is enabled in this sortable,\n      // and plugin has event defined\n      if (\n        sortable.options[plugin.pluginName] &&\n        sortable[plugin.pluginName][eventName]\n      ) {\n        sortable[plugin.pluginName][eventName]({ sortable, ...evt });\n      }\n    });\n  },\n  initializePlugins(sortable, el, defaults, options) {\n    plugins.forEach((plugin) => {\n      const pluginName = plugin.pluginName;\n      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n\n      let initialized = new plugin(sortable, el, sortable.options);\n      initialized.sortable = sortable;\n      initialized.options = sortable.options;\n      sortable[pluginName] = initialized;\n\n      // Add default options from plugin\n      Object.assign(defaults, initialized.defaults);\n    });\n\n    for (let option in sortable.options) {\n      if (!sortable.options.hasOwnProperty(option)) continue;\n      let modified = this.modifyOption(\n        sortable,\n        option,\n        sortable.options[option]\n      );\n      if (typeof modified !== \"undefined\") {\n        sortable.options[option] = modified;\n      }\n    }\n  },\n  getEventProperties(name, sortable) {\n    let eventProperties = {};\n    plugins.forEach((plugin) => {\n      if (typeof plugin.eventProperties !== \"function\") return;\n      Object.assign(\n        eventProperties,\n        plugin.eventProperties.call(sortable[plugin.pluginName], name)\n      );\n    });\n\n    return eventProperties;\n  },\n  modifyOption(sortable, name, value) {\n    let modifiedValue;\n    plugins.forEach((plugin) => {\n      // Plugin must exist on the Sortable\n      if (!sortable[plugin.pluginName]) return;\n\n      // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n      if (\n        plugin.optionListeners &&\n        typeof plugin.optionListeners[name] === \"function\"\n      ) {\n        modifiedValue = plugin.optionListeners[name].call(\n          sortable[plugin.pluginName],\n          value\n        );\n      }\n    });\n\n    return modifiedValue;\n  },\n};\n\nexport default pluginManager;\n","import { expando, IE11OrLess, Edge } from \"../../utils/src\";\nimport PluginManager from \"./PluginManager\";\n\nexport default function dispatchEvent({\n  sortable,\n  rootEl,\n  name,\n  targetEl,\n  cloneEl,\n  toEl,\n  fromEl,\n  oldIndex,\n  newIndex,\n  oldDraggableIndex,\n  newDraggableIndex,\n  originalEvent,\n  putSortable,\n  extraEventProperties,\n}) {\n  sortable = sortable || (rootEl && rootEl[expando]);\n  if (!sortable) return;\n\n  let evt,\n    options = sortable.options,\n    onName = \"on\" + name.charAt(0).toUpperCase() + name.substr(1);\n  // Support for new CustomEvent feature\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: true,\n    });\n  } else {\n    evt = document.createEvent(\"Event\");\n    evt.initEvent(name, true, true);\n  }\n\n  evt.to = toEl || rootEl;\n  evt.from = fromEl || rootEl;\n  evt.item = targetEl || rootEl;\n  evt.clone = cloneEl;\n\n  evt.oldIndex = oldIndex;\n  evt.newIndex = newIndex;\n\n  evt.oldDraggableIndex = oldDraggableIndex;\n  evt.newDraggableIndex = newDraggableIndex;\n\n  evt.originalEvent = originalEvent;\n  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n  let allEventProperties = {\n    ...extraEventProperties,\n    ...PluginManager.getEventProperties(name, sortable),\n  };\n  for (let option in allEventProperties) {\n    evt[option] = allEventProperties[option];\n  }\n\n  if (rootEl) {\n    rootEl.dispatchEvent(evt);\n  }\n\n  if (options[onName]) {\n    options[onName].call(sortable, evt);\n  }\n}\n","import { version } from \"../package.json\";\nimport AnimationStateManager from \"./Animation\";\nimport PluginManager from \"./PluginManager\";\nimport dispatchEvent from \"./EventDispatcher\";\n/**\n * @todo import as namespace: import * as utils from \"../../utils/src\"\n */\nimport {\n  on,\n  off,\n  closest,\n  toggleClass,\n  css,\n  matrix,\n  find,\n  getWindowScrollingElement,\n  getRect,\n  isScrolledPast,\n  getChild,\n  lastChild,\n  index,\n  getRelativeScrollOffset,\n  extend,\n  throttle,\n  scrollBy,\n  clone,\n  expando,\n  IE11OrLess,\n  Edge,\n  FireFox,\n  Safari,\n  IOS,\n  ChromeForAndroid,\n} from \"../../utils/src\";\n\nlet pluginEvent = function (\n  eventName,\n  sortable,\n  //@ts-ignore\n  { evt: originalEvent, ...data } = {}\n) {\n  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, {\n    dragEl,\n    parentEl,\n    ghostEl,\n    rootEl,\n    nextEl,\n    lastDownEl,\n    cloneEl,\n    cloneHidden,\n    dragStarted: moved,\n    putSortable,\n    //@ts-ignore\n    activeSortable: Sortable.active,\n    originalEvent,\n\n    oldIndex,\n    oldDraggableIndex,\n    newIndex,\n    newDraggableIndex,\n\n    hideGhostForTarget: _hideGhostForTarget,\n    unhideGhostForTarget: _unhideGhostForTarget,\n\n    cloneNowHidden() {\n      cloneHidden = true;\n    },\n    cloneNowShown() {\n      cloneHidden = false;\n    },\n\n    dispatchSortableEvent(name) {\n      _dispatchEvent({ sortable, name, originalEvent });\n    },\n\n    ...data,\n  });\n};\n\nfunction _dispatchEvent(info) {\n  dispatchEvent({\n    putSortable,\n    cloneEl,\n    targetEl: dragEl,\n    rootEl,\n    oldIndex,\n    oldDraggableIndex,\n    newIndex,\n    newDraggableIndex,\n    ...info,\n  });\n}\n\nlet dragEl,\n  parentEl,\n  ghostEl,\n  rootEl,\n  nextEl,\n  lastDownEl,\n  cloneEl,\n  cloneHidden,\n  oldIndex,\n  newIndex,\n  oldDraggableIndex,\n  newDraggableIndex,\n  activeGroup,\n  putSortable,\n  awaitingDragStarted = false,\n  ignoreNextClick = false,\n  sortables = [],\n  tapEvt,\n  touchEvt,\n  lastDx,\n  lastDy,\n  tapDistanceLeft,\n  tapDistanceTop,\n  moved,\n  lastTarget,\n  lastDirection,\n  pastFirstInvertThresh = false,\n  isCircumstantialInvert = false,\n  targetMoveDistance,\n  // For positioning ghost absolutely\n  ghostRelativeParent,\n  ghostRelativeParentInitialScroll = [], // (left, top)\n  _silent = false,\n  savedInputChecked = [];\n\n/** @const */\nconst documentExists = typeof document !== \"undefined\",\n  PositionGhostAbsolutely = IOS,\n  CSSFloatProperty = Edge || IE11OrLess ? \"cssFloat\" : \"float\",\n  // This will not pass for IE9, because IE9 DnD only works on anchors\n  supportDraggable =\n    documentExists &&\n    !ChromeForAndroid &&\n    !IOS &&\n    \"draggable\" in document.createElement(\"div\"),\n  supportCssPointerEvents = (function () {\n    if (!documentExists) return;\n    // false when <= IE11\n    if (IE11OrLess) {\n      return false;\n    }\n    let el = document.createElement(\"x\");\n    el.style.cssText = \"pointer-events:auto\";\n    return el.style.pointerEvents === \"auto\";\n  })(),\n  _detectDirection = function (el, options) {\n    //@ts-ignore\n    let elCSS = css(el),\n      elWidth =\n        parseInt(elCSS.width) -\n        parseInt(elCSS.paddingLeft) -\n        parseInt(elCSS.paddingRight) -\n        parseInt(elCSS.borderLeftWidth) -\n        parseInt(elCSS.borderRightWidth),\n      child1 = getChild(el, 0, options),\n      child2 = getChild(el, 1, options),\n      //@ts-ignore\n      firstChildCSS = child1 && css(child1),\n      //@ts-ignore\n      secondChildCSS = child2 && css(child2),\n      firstChildWidth =\n        firstChildCSS &&\n        parseInt(firstChildCSS.marginLeft) +\n          parseInt(firstChildCSS.marginRight) +\n          //@ts-ignore\n          getRect(child1).width,\n      secondChildWidth =\n        secondChildCSS &&\n        parseInt(secondChildCSS.marginLeft) +\n          parseInt(secondChildCSS.marginRight) +\n          //@ts-ignore\n          getRect(child2).width;\n\n    if (elCSS.display === \"flex\") {\n      return elCSS.flexDirection === \"column\" ||\n        elCSS.flexDirection === \"column-reverse\"\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    if (elCSS.display === \"grid\") {\n      return elCSS.gridTemplateColumns.split(\" \").length <= 1\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    if (child1 && firstChildCSS.float && firstChildCSS.float !== \"none\") {\n      let touchingSideChild2 =\n        firstChildCSS.float === \"left\" ? \"left\" : \"right\";\n\n      return child2 &&\n        (secondChildCSS.clear === \"both\" ||\n          secondChildCSS.clear === touchingSideChild2)\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    return child1 &&\n      (firstChildCSS.display === \"block\" ||\n        firstChildCSS.display === \"flex\" ||\n        firstChildCSS.display === \"table\" ||\n        firstChildCSS.display === \"grid\" ||\n        (firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === \"none\") ||\n        (child2 &&\n          elCSS[CSSFloatProperty] === \"none\" &&\n          firstChildWidth + secondChildWidth > elWidth))\n      ? \"vertical\"\n      : \"horizontal\";\n  },\n  _dragElInRowColumn = function (dragRect, targetRect, vertical) {\n    let dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n      dragElOppLength = vertical ? dragRect.width : dragRect.height,\n      targetS1Opp = vertical ? targetRect.left : targetRect.top,\n      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n      targetOppLength = vertical ? targetRect.width : targetRect.height;\n\n    return (\n      dragElS1Opp === targetS1Opp ||\n      dragElS2Opp === targetS2Opp ||\n      dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2\n    );\n  },\n  /**\n   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n   * @param  {Number} x      X position\n   * @param  {Number} y      Y position\n   * @return {HTMLElement}   Element of the first found nearest Sortable\n   */\n  _detectNearestEmptySortable = function (x, y) {\n    let ret;\n    sortables.some((sortable) => {\n      //@ts-ignore\n      if (lastChild(sortable)) return;\n\n      //@ts-ignore\n      let rect = getRect(sortable),\n        threshold = sortable[expando].options.emptyInsertThreshold,\n        insideHorizontally =\n          x >= rect.left - threshold && x <= rect.right + threshold,\n        insideVertically =\n          y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n      if (threshold && insideHorizontally && insideVertically) {\n        return (ret = sortable);\n      }\n    });\n    return ret;\n  },\n  _prepareGroup = function (options) {\n    function toFn(value, pull) {\n      return function (to, from, dragEl, evt) {\n        let sameGroup =\n          to.options.group.name &&\n          from.options.group.name &&\n          to.options.group.name === from.options.group.name;\n\n        if (value == null && (pull || sameGroup)) {\n          // Default pull value\n          // Default pull and put value if same group\n          return true;\n        } else if (value == null || value === false) {\n          return false;\n        } else if (pull && value === \"clone\") {\n          return value;\n        } else if (typeof value === \"function\") {\n          return toFn(value(to, from, dragEl, evt), pull)(\n            to,\n            from,\n            dragEl,\n            evt\n          );\n        } else {\n          let otherGroup = (pull ? to : from).options.group.name;\n\n          return (\n            value === true ||\n            (typeof value === \"string\" && value === otherGroup) ||\n            (value.join && value.indexOf(otherGroup) > -1)\n          );\n        }\n      };\n    }\n\n    let group = {};\n    let originalGroup = options.group;\n\n    if (!originalGroup || typeof originalGroup != \"object\") {\n      originalGroup = { name: originalGroup };\n    }\n\n    //@ts-ignore\n    group.name = originalGroup.name;\n    //@ts-ignore\n    group.checkPull = toFn(originalGroup.pull, true);\n    //@ts-ignore\n    group.checkPut = toFn(originalGroup.put);\n    //@ts-ignore\n    group.revertClone = originalGroup.revertClone;\n\n    options.group = group;\n  },\n  _hideGhostForTarget = function () {\n    if (!supportCssPointerEvents && ghostEl) {\n      css(ghostEl, \"display\", \"none\");\n    }\n  },\n  _unhideGhostForTarget = function () {\n    if (!supportCssPointerEvents && ghostEl) {\n      css(ghostEl, \"display\", \"\");\n    }\n  };\n\n// #1184 fix - Prevent click event on fallback if dragged but item not changed position\nif (documentExists) {\n  document.addEventListener(\n    \"click\",\n    function (evt) {\n      if (ignoreNextClick) {\n        evt.preventDefault();\n        evt.stopPropagation && evt.stopPropagation();\n        evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n        ignoreNextClick = false;\n        return false;\n      }\n    },\n    true\n  );\n}\n\nlet nearestEmptyInsertDetectEvent = function (evt) {\n  if (dragEl) {\n    evt = evt.touches ? evt.touches[0] : evt;\n    let nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n    if (nearest) {\n      // Create imitation event\n      let event = {};\n      for (let i in evt) {\n        if (evt.hasOwnProperty(i)) {\n          event[i] = evt[i];\n        }\n      }\n      //@ts-ignore\n      event.target = event.rootEl = nearest;\n      //@ts-ignore\n      event.preventDefault = void 0;\n      //@ts-ignore\n      event.stopPropagation = void 0;\n      nearest[expando]._onDragOver(event);\n    }\n  }\n};\n\nlet _checkOutsideTargetEl = function (evt) {\n  if (dragEl) {\n    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n  }\n};\n\n/**\n * @class  Sortable\n * @param  {HTMLElement}  el\n * @param  {Object}       [options]\n */\nfunction Sortable(el, options) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    throw `Sortable: \\`el\\` must be an HTMLElement, not ${{}.toString.call(\n      el\n    )}`;\n  }\n\n  this.el = el; // root element\n  this.options = options = Object.assign({}, options);\n\n  // Export instance\n  el[expando] = this;\n\n  let defaults = {\n    group: null,\n    sort: true,\n    disabled: false,\n    store: null,\n    handle: null,\n    draggable: /^[uo]l$/i.test(el.nodeName) ? \">li\" : \">*\",\n    swapThreshold: 1, // percentage; 0 <= x <= 1\n    invertSwap: false, // invert always\n    invertedSwapThreshold: null, // will be set to same as swapThreshold if default\n    removeCloneOnHide: true,\n    direction: function () {\n      return _detectDirection(el, this.options);\n    },\n    ghostClass: \"sortable-ghost\",\n    chosenClass: \"sortable-chosen\",\n    dragClass: \"sortable-drag\",\n    ignore: \"a, img\",\n    filter: null,\n    preventOnFilter: true,\n    animation: 0,\n    easing: null,\n    setData: function (dataTransfer, dragEl) {\n      dataTransfer.setData(\"Text\", dragEl.textContent);\n    },\n    dropBubble: false,\n    dragoverBubble: false,\n    dataIdAttr: \"data-id\",\n    delay: 0,\n    delayOnTouchOnly: false,\n    touchStartThreshold:\n      (Number.parseInt ? Number : window).parseInt(\n        //@ts-ignore\n        window.devicePixelRatio,\n        10\n      ) || 1,\n    forceFallback: false,\n    fallbackClass: \"sortable-fallback\",\n    fallbackOnBody: false,\n    fallbackTolerance: 0,\n    fallbackOffset: { x: 0, y: 0 },\n    supportPointer:\n      //@ts-ignore\n      Sortable.supportPointer !== false && \"PointerEvent\" in window,\n    emptyInsertThreshold: 5,\n  };\n\n  //@ts-ignore\n  PluginManager.initializePlugins(this, el, defaults);\n\n  // Set default options\n  for (let name in defaults) {\n    !(name in options) && (options[name] = defaults[name]);\n  }\n\n  _prepareGroup(options);\n\n  // Bind all private methods\n  for (let fn in this) {\n    if (fn.charAt(0) === \"_\" && typeof this[fn] === \"function\") {\n      this[fn] = this[fn].bind(this);\n    }\n  }\n\n  // Setup drag mode\n  this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n  if (this.nativeDraggable) {\n    // Touch start threshold cannot be greater than the native dragstart threshold\n    this.options.touchStartThreshold = 1;\n  }\n\n  // Bind events\n  if (options.supportPointer) {\n    on(el, \"pointerdown\", this._onTapStart);\n  } else {\n    on(el, \"mousedown\", this._onTapStart);\n    on(el, \"touchstart\", this._onTapStart);\n  }\n\n  if (this.nativeDraggable) {\n    on(el, \"dragover\", this);\n    on(el, \"dragenter\", this);\n  }\n\n  sortables.push(this.el);\n\n  // Restore sorting\n  options.store &&\n    options.store.get &&\n    this.sort(options.store.get(this) || []);\n\n  // Add animation state manager\n  Object.assign(this, AnimationStateManager());\n}\n\nSortable.prototype = /** @lends Sortable.prototype */ {\n  constructor: Sortable,\n\n  _isOutsideThisEl: function (target) {\n    if (!this.el.contains(target) && target !== this.el) {\n      lastTarget = null;\n    }\n  },\n\n  _getDirection: function (evt, target) {\n    return typeof this.options.direction === \"function\"\n      ? this.options.direction.call(this, evt, target, dragEl)\n      : this.options.direction;\n  },\n\n  _onTapStart: function (/** Event|TouchEvent */ evt) {\n    if (!evt.cancelable) return;\n    let _this = this,\n      el = this.el,\n      options = this.options,\n      preventOnFilter = options.preventOnFilter,\n      type = evt.type,\n      touch =\n        (evt.touches && evt.touches[0]) ||\n        (evt.pointerType && evt.pointerType === \"touch\" && evt),\n      target = (touch || evt).target,\n      originalTarget =\n        (evt.target.shadowRoot &&\n          ((evt.path && evt.path[0]) ||\n            (evt.composedPath && evt.composedPath()[0]))) ||\n        target,\n      filter = options.filter;\n\n    _saveInputCheckedState(el);\n\n    // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n    if (dragEl) {\n      return;\n    }\n\n    if (\n      (/mousedown|pointerdown/.test(type) && evt.button !== 0) ||\n      options.disabled\n    ) {\n      return; // only left button and enabled\n    }\n\n    // cancel dnd if original target is content editable\n    if (originalTarget.isContentEditable) {\n      return;\n    }\n\n    // Safari ignores further event handling after mousedown\n    if (\n      !this.nativeDraggable &&\n      Safari &&\n      target &&\n      target.tagName.toUpperCase() === \"SELECT\"\n    ) {\n      return;\n    }\n\n    target = closest(target, options.draggable, el, false);\n\n    if (target && target.animated) {\n      return;\n    }\n\n    if (lastDownEl === target) {\n      // Ignoring duplicate `down`\n      return;\n    }\n\n    // Get the index of the dragged element within its parent\n    //@ts-ignore\n    oldIndex = index(target);\n    oldDraggableIndex = index(target, options.draggable);\n\n    // Check filter\n    if (typeof filter === \"function\") {\n      if (filter.call(this, evt, target, this)) {\n        _dispatchEvent({\n          sortable: _this,\n          rootEl: originalTarget,\n          name: \"filter\",\n          targetEl: target,\n          toEl: el,\n          fromEl: el,\n        });\n        pluginEvent(\"filter\", _this, { evt });\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    } else if (filter) {\n      filter = filter.split(\",\").some(function (criteria) {\n        criteria = closest(originalTarget, criteria.trim(), el, false);\n\n        if (criteria) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: criteria,\n            name: \"filter\",\n            targetEl: target,\n            fromEl: el,\n            toEl: el,\n          });\n          pluginEvent(\"filter\", _this, { evt });\n          return true;\n        }\n      });\n\n      if (filter) {\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    }\n\n    if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n      return;\n    }\n\n    // Prepare `dragstart`\n    this._prepareDragStart(evt, touch, target);\n  },\n\n  _prepareDragStart: function (\n    /** Event */ evt,\n    /** Touch */ touch,\n    /** HTMLElement */ target\n  ) {\n    let _this = this,\n      el = _this.el,\n      options = _this.options,\n      ownerDocument = el.ownerDocument,\n      dragStartFn;\n\n    if (target && !dragEl && target.parentNode === el) {\n      //@ts-ignore\n      let dragRect = getRect(target);\n      rootEl = el;\n      dragEl = target;\n      parentEl = dragEl.parentNode;\n      nextEl = dragEl.nextSibling;\n      lastDownEl = target;\n      activeGroup = options.group;\n\n      //@ts-ignore\n      Sortable.dragged = dragEl;\n\n      tapEvt = {\n        target: dragEl,\n        clientX: (touch || evt).clientX,\n        clientY: (touch || evt).clientY,\n      };\n\n      tapDistanceLeft = tapEvt.clientX - dragRect.left;\n      tapDistanceTop = tapEvt.clientY - dragRect.top;\n\n      this._lastX = (touch || evt).clientX;\n      this._lastY = (touch || evt).clientY;\n\n      dragEl.style[\"will-change\"] = \"all\";\n\n      dragStartFn = function () {\n        pluginEvent(\"delayEnded\", _this, { evt });\n        //@ts-ignore\n        if (Sortable.eventCanceled) {\n          _this._onDrop();\n          return;\n        }\n        // Delayed drag has been triggered\n        // we can re-enable the events: touchmove/mousemove\n        _this._disableDelayedDragEvents();\n\n        if (!FireFox && _this.nativeDraggable) {\n          dragEl.draggable = true;\n        }\n\n        // Bind the events: dragstart/dragend\n        _this._triggerDragStart(evt, touch);\n\n        // Drag start event\n        _dispatchEvent({\n          sortable: _this,\n          name: \"choose\",\n          originalEvent: evt,\n        });\n\n        // Chosen item\n        toggleClass(dragEl, options.chosenClass, true);\n      };\n\n      // Disable \"draggable\"\n      options.ignore.split(\",\").forEach(function (criteria) {\n        find(dragEl, criteria.trim(), _disableDraggable);\n      });\n\n      on(ownerDocument, \"dragover\", nearestEmptyInsertDetectEvent);\n      on(ownerDocument, \"mousemove\", nearestEmptyInsertDetectEvent);\n      on(ownerDocument, \"touchmove\", nearestEmptyInsertDetectEvent);\n\n      on(ownerDocument, \"mouseup\", _this._onDrop);\n      on(ownerDocument, \"touchend\", _this._onDrop);\n      on(ownerDocument, \"touchcancel\", _this._onDrop);\n\n      // Make dragEl draggable (must be before delay for FireFox)\n      if (FireFox && this.nativeDraggable) {\n        this.options.touchStartThreshold = 4;\n        dragEl.draggable = true;\n      }\n\n      pluginEvent(\"delayStart\", this, { evt });\n\n      // Delay is impossible for native DnD in Edge or IE\n      if (\n        options.delay &&\n        (!options.delayOnTouchOnly || touch) &&\n        (!this.nativeDraggable || !(Edge || IE11OrLess))\n      ) {\n        //@ts-ignore\n        if (Sortable.eventCanceled) {\n          this._onDrop();\n          return;\n        }\n        // If the user moves the pointer or let go the click or touch\n        // before the delay has been reached:\n        // disable the delayed drag\n        on(ownerDocument, \"mouseup\", _this._disableDelayedDrag);\n        on(ownerDocument, \"touchend\", _this._disableDelayedDrag);\n        on(ownerDocument, \"touchcancel\", _this._disableDelayedDrag);\n        on(ownerDocument, \"mousemove\", _this._delayedDragTouchMoveHandler);\n        on(ownerDocument, \"touchmove\", _this._delayedDragTouchMoveHandler);\n        options.supportPointer &&\n          on(ownerDocument, \"pointermove\", _this._delayedDragTouchMoveHandler);\n\n        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n      } else {\n        dragStartFn();\n      }\n    }\n  },\n\n  _delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/ e) {\n    let touch = e.touches ? e.touches[0] : e;\n    if (\n      Math.max(\n        Math.abs(touch.clientX - this._lastX),\n        Math.abs(touch.clientY - this._lastY)\n      ) >=\n      Math.floor(\n        this.options.touchStartThreshold /\n          ((this.nativeDraggable && window.devicePixelRatio) || 1)\n      )\n    ) {\n      this._disableDelayedDrag();\n    }\n  },\n\n  _disableDelayedDrag: function () {\n    dragEl && _disableDraggable(dragEl);\n    clearTimeout(this._dragStartTimer);\n\n    this._disableDelayedDragEvents();\n  },\n\n  _disableDelayedDragEvents: function () {\n    let ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, \"mouseup\", this._disableDelayedDrag);\n    off(ownerDocument, \"touchend\", this._disableDelayedDrag);\n    off(ownerDocument, \"touchcancel\", this._disableDelayedDrag);\n    off(ownerDocument, \"mousemove\", this._delayedDragTouchMoveHandler);\n    off(ownerDocument, \"touchmove\", this._delayedDragTouchMoveHandler);\n    off(ownerDocument, \"pointermove\", this._delayedDragTouchMoveHandler);\n  },\n\n  _triggerDragStart: function (/** Event */ evt, /** Touch */ touch) {\n    touch = touch || (evt.pointerType == \"touch\" && evt);\n\n    if (!this.nativeDraggable || touch) {\n      if (this.options.supportPointer) {\n        on(document, \"pointermove\", this._onTouchMove);\n      } else if (touch) {\n        on(document, \"touchmove\", this._onTouchMove);\n      } else {\n        on(document, \"mousemove\", this._onTouchMove);\n      }\n    } else {\n      on(dragEl, \"dragend\", this);\n      on(rootEl, \"dragstart\", this._onDragStart);\n    }\n\n    try {\n      //@ts-ignore\n      if (document.selection) {\n        // Timeout neccessary for IE9\n        _nextTick(function () {\n          //@ts-ignore\n          document.selection.empty();\n        });\n      } else {\n        window.getSelection().removeAllRanges();\n      }\n    } catch (err) {}\n  },\n\n  _dragStarted: function (fallback, evt) {\n    let _this = this;\n    awaitingDragStarted = false;\n    if (rootEl && dragEl) {\n      pluginEvent(\"dragStarted\", this, { evt });\n\n      if (this.nativeDraggable) {\n        on(document, \"dragover\", _checkOutsideTargetEl);\n      }\n      let options = this.options;\n\n      // Apply effect\n      !fallback && toggleClass(dragEl, options.dragClass, false);\n      toggleClass(dragEl, options.ghostClass, true);\n\n      //@ts-ignore\n      Sortable.active = this;\n\n      fallback && this._appendGhost();\n\n      // Drag start event\n      _dispatchEvent({\n        sortable: this,\n        name: \"start\",\n        originalEvent: evt,\n      });\n    } else {\n      this._nulling();\n    }\n  },\n\n  _emulateDragOver: function () {\n    if (touchEvt) {\n      this._lastX = touchEvt.clientX;\n      this._lastY = touchEvt.clientY;\n\n      _hideGhostForTarget();\n\n      let target = document.elementFromPoint(\n        touchEvt.clientX,\n        touchEvt.clientY\n      );\n      let parent = target;\n\n      while (target && target.shadowRoot) {\n        target = target.shadowRoot.elementFromPoint(\n          touchEvt.clientX,\n          touchEvt.clientY\n        );\n        if (target === parent) break;\n        parent = target;\n      }\n\n      dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n      if (parent) {\n        do {\n          if (parent[expando]) {\n            let inserted;\n\n            inserted = parent[expando]._onDragOver({\n              clientX: touchEvt.clientX,\n              clientY: touchEvt.clientY,\n              target: target,\n              rootEl: parent,\n            });\n\n            if (inserted && !this.options.dragoverBubble) {\n              break;\n            }\n          }\n\n          target = parent; // store last element\n        } while (\n          /* jshint boss:true */\n          //@ts-ignore\n          (parent = parent.parentNode)\n        );\n      }\n\n      _unhideGhostForTarget();\n    }\n  },\n\n  _onTouchMove: function (/**TouchEvent*/ evt) {\n    if (tapEvt) {\n      let options = this.options,\n        fallbackTolerance = options.fallbackTolerance,\n        fallbackOffset = options.fallbackOffset,\n        touch = evt.touches ? evt.touches[0] : evt,\n        ghostMatrix = ghostEl && matrix(ghostEl, true),\n        scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n        scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n        relativeScrollOffset =\n          PositionGhostAbsolutely &&\n          ghostRelativeParent &&\n          getRelativeScrollOffset(ghostRelativeParent),\n        dx =\n          (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) +\n          (relativeScrollOffset\n            ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]\n            : 0) /\n            (scaleX || 1),\n        dy =\n          (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) +\n          (relativeScrollOffset\n            ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]\n            : 0) /\n            (scaleY || 1);\n\n      // only set the status to dragging, when we are actually dragging\n      //@ts-ignore\n      if (!Sortable.active && !awaitingDragStarted) {\n        if (\n          fallbackTolerance &&\n          Math.max(\n            Math.abs(touch.clientX - this._lastX),\n            Math.abs(touch.clientY - this._lastY)\n          ) < fallbackTolerance\n        ) {\n          return;\n        }\n        this._onDragStart(evt, true);\n      }\n\n      if (ghostEl) {\n        if (ghostMatrix) {\n          ghostMatrix.e += dx - (lastDx || 0);\n          ghostMatrix.f += dy - (lastDy || 0);\n        } else {\n          ghostMatrix = {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            e: dx,\n            f: dy,\n          };\n        }\n\n        let cssMatrix = `matrix(${ghostMatrix.a},${ghostMatrix.b},${ghostMatrix.c},${ghostMatrix.d},${ghostMatrix.e},${ghostMatrix.f})`;\n\n        css(ghostEl, \"webkitTransform\", cssMatrix);\n        css(ghostEl, \"mozTransform\", cssMatrix);\n        css(ghostEl, \"msTransform\", cssMatrix);\n        css(ghostEl, \"transform\", cssMatrix);\n\n        lastDx = dx;\n        lastDy = dy;\n\n        touchEvt = touch;\n      }\n\n      evt.cancelable && evt.preventDefault();\n    }\n  },\n\n  _appendGhost: function () {\n    // Bug if using scale(): https://stackoverflow.com/questions/2637058\n    // Not being adjusted for\n    if (!ghostEl) {\n      let container = this.options.fallbackOnBody ? document.body : rootEl,\n        rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n        options = this.options;\n\n      // Position absolutely\n      if (PositionGhostAbsolutely) {\n        // Get relatively positioned parent\n        ghostRelativeParent = container;\n\n        while (\n          //@ts-ignore\n          css(ghostRelativeParent, \"position\") === \"static\" &&\n          //@ts-ignore\n          css(ghostRelativeParent, \"transform\") === \"none\" &&\n          ghostRelativeParent !== document\n        ) {\n          ghostRelativeParent = ghostRelativeParent.parentNode;\n        }\n\n        if (\n          ghostRelativeParent !== document.body &&\n          ghostRelativeParent !== document.documentElement\n        ) {\n          if (ghostRelativeParent === document)\n            ghostRelativeParent = getWindowScrollingElement();\n\n          rect.top += ghostRelativeParent.scrollTop;\n          rect.left += ghostRelativeParent.scrollLeft;\n        } else {\n          ghostRelativeParent = getWindowScrollingElement();\n        }\n        ghostRelativeParentInitialScroll = getRelativeScrollOffset(\n          ghostRelativeParent\n        );\n      }\n\n      ghostEl = dragEl.cloneNode(true);\n\n      toggleClass(ghostEl, options.ghostClass, false);\n      toggleClass(ghostEl, options.fallbackClass, true);\n      toggleClass(ghostEl, options.dragClass, true);\n\n      css(ghostEl, \"transition\", \"\");\n      css(ghostEl, \"transform\", \"\");\n\n      css(ghostEl, \"box-sizing\", \"border-box\");\n      css(ghostEl, \"margin\", 0);\n      css(ghostEl, \"top\", rect.top);\n      css(ghostEl, \"left\", rect.left);\n      css(ghostEl, \"width\", rect.width);\n      css(ghostEl, \"height\", rect.height);\n      css(ghostEl, \"opacity\", \"0.8\");\n      css(ghostEl, \"position\", PositionGhostAbsolutely ? \"absolute\" : \"fixed\");\n      css(ghostEl, \"zIndex\", \"100000\");\n      css(ghostEl, \"pointerEvents\", \"none\");\n\n      //@ts-ignore\n      Sortable.ghost = ghostEl;\n\n      container.appendChild(ghostEl);\n\n      // Set transform-origin\n      css(\n        ghostEl,\n        \"transform-origin\",\n        (tapDistanceLeft / parseInt(ghostEl.style.width)) * 100 +\n          \"% \" +\n          (tapDistanceTop / parseInt(ghostEl.style.height)) * 100 +\n          \"%\"\n      );\n    }\n  },\n\n  _onDragStart: function (/**Event*/ evt, /**boolean*/ fallback) {\n    let _this = this;\n    let dataTransfer = evt.dataTransfer;\n    let options = _this.options;\n\n    pluginEvent(\"dragStart\", this, { evt });\n    //@ts-ignore\n    if (Sortable.eventCanceled) {\n      this._onDrop();\n      return;\n    }\n\n    pluginEvent(\"setupClone\", this);\n    //@ts-ignore\n    if (!Sortable.eventCanceled) {\n      cloneEl = clone(dragEl);\n\n      cloneEl.draggable = false;\n      cloneEl.style[\"will-change\"] = \"\";\n\n      this._hideClone();\n\n      toggleClass(cloneEl, this.options.chosenClass, false);\n      //@ts-ignore\n      Sortable.clone = cloneEl;\n    }\n\n    // #1143: IFrame support workaround\n    _this.cloneId = _nextTick(function () {\n      pluginEvent(\"clone\", _this);\n      //@ts-ignore\n      if (Sortable.eventCanceled) return;\n\n      if (!_this.options.removeCloneOnHide) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      }\n      _this._hideClone();\n\n      _dispatchEvent({\n        sortable: _this,\n        name: \"clone\",\n      });\n    });\n\n    !fallback && toggleClass(dragEl, options.dragClass, true);\n\n    // Set proper drop events\n    if (fallback) {\n      ignoreNextClick = true;\n      _this._loopId = setInterval(_this._emulateDragOver, 50);\n    } else {\n      // Undo what was set in _prepareDragStart before drag started\n      off(document, \"mouseup\", _this._onDrop);\n      off(document, \"touchend\", _this._onDrop);\n      off(document, \"touchcancel\", _this._onDrop);\n\n      if (dataTransfer) {\n        dataTransfer.effectAllowed = \"move\";\n        options.setData && options.setData.call(_this, dataTransfer, dragEl);\n      }\n\n      on(document, \"drop\", _this);\n\n      // #1276 fix:\n      css(dragEl, \"transform\", \"translateZ(0)\");\n    }\n\n    awaitingDragStarted = true;\n\n    _this._dragStartId = _nextTick(\n      _this._dragStarted.bind(_this, fallback, evt)\n    );\n    on(document, \"selectstart\", _this);\n\n    moved = true;\n\n    if (Safari) {\n      css(document.body, \"user-select\", \"none\");\n    }\n  },\n\n  // Returns true - if no further action is needed (either inserted or another condition)\n  _onDragOver: function (/**Event*/ evt) {\n    let el = this.el,\n      target = evt.target,\n      dragRect,\n      targetRect,\n      revert,\n      options = this.options,\n      group = options.group,\n      //@ts-ignore\n      activeSortable = Sortable.active,\n      isOwner = activeGroup === group,\n      canSort = options.sort,\n      fromSortable = putSortable || activeSortable,\n      vertical,\n      _this = this,\n      completedFired = false;\n\n    if (_silent) return;\n\n    function dragOverEvent(name, extra) {\n      pluginEvent(name, _this, {\n        evt,\n        isOwner,\n        axis: vertical ? \"vertical\" : \"horizontal\",\n        revert,\n        dragRect,\n        targetRect,\n        canSort,\n        fromSortable,\n        target,\n        completed,\n        onMove(target, after) {\n          return onMove(\n            rootEl,\n            el,\n            dragEl,\n            dragRect,\n            target,\n            //@ts-ignore\n            getRect(target),\n            evt,\n            after\n          );\n        },\n        changed,\n        ...extra,\n      });\n    }\n\n    // Capture animation state\n    function capture() {\n      //@ts-ignore\n      dragOverEvent(\"dragOverAnimationCapture\");\n\n      _this.captureAnimationState();\n      if (_this !== fromSortable) {\n        fromSortable.captureAnimationState();\n      }\n    }\n\n    // Return invocation when dragEl is inserted (or completed)\n    function completed(insertion) {\n      dragOverEvent(\"dragOverCompleted\", { insertion });\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        } else {\n          activeSortable._showClone(_this);\n        }\n\n        if (_this !== fromSortable) {\n          // Set ghost class to new sortable's ghost class\n          toggleClass(\n            dragEl,\n            putSortable\n              ? putSortable.options.ghostClass\n              : activeSortable.options.ghostClass,\n            false\n          );\n          toggleClass(dragEl, options.ghostClass, true);\n        }\n\n        //@ts-ignore\n        if (putSortable !== _this && _this !== Sortable.active) {\n          putSortable = _this;\n          //@ts-ignore\n        } else if (_this === Sortable.active && putSortable) {\n          putSortable = null;\n        }\n\n        // Animation\n        if (fromSortable === _this) {\n          _this._ignoreWhileAnimating = target;\n        }\n        _this.animateAll(function () {\n          //@ts-ignore\n          dragOverEvent(\"dragOverAnimationComplete\");\n          _this._ignoreWhileAnimating = null;\n        });\n        if (_this !== fromSortable) {\n          fromSortable.animateAll();\n          fromSortable._ignoreWhileAnimating = null;\n        }\n      }\n\n      // Null lastTarget if it is not inside a previously swapped element\n      if (\n        (target === dragEl && !dragEl.animated) ||\n        (target === el && !target.animated)\n      ) {\n        lastTarget = null;\n      }\n\n      // no bubbling and not fallback\n      if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n\n        // Do not detect for empty insert if already inserted\n        !insertion && nearestEmptyInsertDetectEvent(evt);\n      }\n\n      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n\n      return (completedFired = true);\n    }\n\n    // Call when dragEl has been inserted\n    function changed() {\n      //@ts-ignore\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n      _dispatchEvent({\n        sortable: _this,\n        name: \"change\",\n        toEl: el,\n        newIndex,\n        newDraggableIndex,\n        originalEvent: evt,\n      });\n    }\n\n    if (evt.preventDefault !== void 0) {\n      evt.cancelable && evt.preventDefault();\n    }\n\n    target = closest(target, options.draggable, el, true);\n\n    //@ts-ignore\n    dragOverEvent(\"dragOver\");\n    //@ts-ignore\n    if (Sortable.eventCanceled) return completedFired;\n\n    if (\n      dragEl.contains(evt.target) ||\n      (target.animated && target.animatingX && target.animatingY) ||\n      _this._ignoreWhileAnimating === target\n    ) {\n      return completed(false);\n    }\n\n    ignoreNextClick = false;\n\n    if (\n      activeSortable &&\n      !options.disabled &&\n      (isOwner\n        ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n        : putSortable === this ||\n          ((this.lastPutMode = activeGroup.checkPull(\n            this,\n            activeSortable,\n            dragEl,\n            evt\n          )) &&\n            group.checkPut(this, activeSortable, dragEl, evt)))\n    ) {\n      vertical = this._getDirection(evt, target) === \"vertical\";\n\n      //@ts-ignore\n      dragRect = getRect(dragEl);\n\n      //@ts-ignore\n      dragOverEvent(\"dragOverValid\");\n      //@ts-ignore\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (revert) {\n        parentEl = rootEl; // actualization\n        capture();\n\n        this._hideClone();\n\n        //@ts-ignore\n        dragOverEvent(\"revert\");\n\n        //@ts-ignore\n        if (!Sortable.eventCanceled) {\n          if (nextEl) {\n            rootEl.insertBefore(dragEl, nextEl);\n          } else {\n            rootEl.appendChild(dragEl);\n          }\n        }\n\n        return completed(true);\n      }\n\n      let elLastChild = lastChild(el, options.draggable);\n\n      if (\n        !elLastChild ||\n        (_ghostIsLast(evt, vertical, this) && !elLastChild.animated)\n      ) {\n        // If already at end of list: Do not insert\n        if (elLastChild === dragEl) {\n          return completed(false);\n        }\n\n        // assign target only if condition is true\n        if (elLastChild && el === evt.target) {\n          target = elLastChild;\n        }\n\n        if (target) {\n          //@ts-ignore\n          targetRect = getRect(target);\n        }\n\n        if (\n          onMove(\n            rootEl,\n            el,\n            dragEl,\n            dragRect,\n            target,\n            targetRect,\n            evt,\n            !!target\n          ) !== false\n        ) {\n          capture();\n          el.appendChild(dragEl);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (target.parentNode === el) {\n        //@ts-ignore\n        targetRect = getRect(target);\n        let direction = 0,\n          targetBeforeFirstSwap,\n          differentLevel = dragEl.parentNode !== el,\n          differentRowCol = !_dragElInRowColumn(\n            (dragEl.animated && dragEl.toRect) || dragRect,\n            (target.animated && target.toRect) || targetRect,\n            vertical\n          ),\n          side1 = vertical ? \"top\" : \"left\",\n          scrolledPastTop =\n            isScrolledPast(target, \"top\", \"top\") ||\n            isScrolledPast(dragEl, \"top\", \"top\"),\n          scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n        if (lastTarget !== target) {\n          targetBeforeFirstSwap = targetRect[side1];\n          pastFirstInvertThresh = false;\n          isCircumstantialInvert =\n            (!differentRowCol && options.invertSwap) || differentLevel;\n        }\n\n        direction = _getSwapDirection(\n          evt,\n          target,\n          targetRect,\n          vertical,\n          differentRowCol ? 1 : options.swapThreshold,\n          options.invertedSwapThreshold == null\n            ? options.swapThreshold\n            : options.invertedSwapThreshold,\n          isCircumstantialInvert,\n          lastTarget === target\n        );\n\n        let sibling;\n\n        if (direction !== 0) {\n          // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n          //@ts-ignore\n          let dragIndex = index(dragEl);\n\n          do {\n            dragIndex -= direction;\n            sibling = parentEl.children[dragIndex];\n          } while (\n            sibling &&\n            //@ts-ignore\n            (css(sibling, \"display\") === \"none\" || sibling === ghostEl)\n          );\n        }\n        // If dragEl is already beside target: Do not insert\n        if (direction === 0 || sibling === target) {\n          return completed(false);\n        }\n\n        lastTarget = target;\n\n        lastDirection = direction;\n\n        let nextSibling = target.nextElementSibling,\n          after = false;\n\n        after = direction === 1;\n\n        let moveVector = onMove(\n          rootEl,\n          el,\n          dragEl,\n          dragRect,\n          target,\n          targetRect,\n          evt,\n          after\n        );\n\n        if (moveVector !== false) {\n          if (moveVector === 1 || moveVector === -1) {\n            after = moveVector === 1;\n          }\n\n          _silent = true;\n          setTimeout(_unsilent, 30);\n\n          capture();\n\n          if (after && !nextSibling) {\n            el.appendChild(dragEl);\n          } else {\n            target.parentNode.insertBefore(\n              dragEl,\n              after ? nextSibling : target\n            );\n          }\n\n          // Undo chrome's scroll adjustment (has no effect on other browsers)\n          if (scrolledPastTop) {\n            scrollBy(\n              scrolledPastTop,\n              0,\n              scrollBefore - scrolledPastTop.scrollTop\n            );\n          }\n\n          parentEl = dragEl.parentNode; // actualization\n\n          // must be done before animation\n          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n            targetMoveDistance = Math.abs(\n              //@ts-ignore\n              targetBeforeFirstSwap - getRect(target)[side1]\n            );\n          }\n          changed();\n\n          return completed(true);\n        }\n      }\n\n      if (el.contains(dragEl)) {\n        return completed(false);\n      }\n    }\n\n    return false;\n  },\n\n  _ignoreWhileAnimating: null,\n\n  _offMoveEvents: function () {\n    off(document, \"mousemove\", this._onTouchMove);\n    off(document, \"touchmove\", this._onTouchMove);\n    off(document, \"pointermove\", this._onTouchMove);\n    off(document, \"dragover\", nearestEmptyInsertDetectEvent);\n    off(document, \"mousemove\", nearestEmptyInsertDetectEvent);\n    off(document, \"touchmove\", nearestEmptyInsertDetectEvent);\n  },\n\n  _offUpEvents: function () {\n    let ownerDocument = this.el.ownerDocument;\n\n    off(ownerDocument, \"mouseup\", this._onDrop);\n    off(ownerDocument, \"touchend\", this._onDrop);\n    off(ownerDocument, \"pointerup\", this._onDrop);\n    off(ownerDocument, \"touchcancel\", this._onDrop);\n    off(document, \"selectstart\", this);\n  },\n\n  _onDrop: function (/**Event*/ evt) {\n    let el = this.el,\n      options = this.options;\n\n    // Get the index of the dragged element within its parent\n    //@ts-ignore\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    pluginEvent(\"drop\", this, {\n      evt,\n    });\n\n    parentEl = dragEl && dragEl.parentNode;\n\n    // Get again after plugin event\n    //@ts-ignore\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    //@ts-ignore\n    if (Sortable.eventCanceled) {\n      this._nulling();\n      return;\n    }\n\n    awaitingDragStarted = false;\n    isCircumstantialInvert = false;\n    pastFirstInvertThresh = false;\n\n    clearInterval(this._loopId);\n\n    clearTimeout(this._dragStartTimer);\n\n    _cancelNextTick(this.cloneId);\n    _cancelNextTick(this._dragStartId);\n\n    // Unbind events\n    if (this.nativeDraggable) {\n      off(document, \"drop\", this);\n      off(el, \"dragstart\", this._onDragStart);\n    }\n    this._offMoveEvents();\n    this._offUpEvents();\n\n    if (Safari) {\n      css(document.body, \"user-select\", \"\");\n    }\n\n    css(dragEl, \"transform\", \"\");\n\n    if (evt) {\n      if (moved) {\n        evt.cancelable && evt.preventDefault();\n        !options.dropBubble && evt.stopPropagation();\n      }\n\n      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n      if (\n        rootEl === parentEl ||\n        (putSortable && putSortable.lastPutMode !== \"clone\")\n      ) {\n        // Remove clone(s)\n        cloneEl &&\n          cloneEl.parentNode &&\n          cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      if (dragEl) {\n        if (this.nativeDraggable) {\n          off(dragEl, \"dragend\", this);\n        }\n\n        _disableDraggable(dragEl);\n        dragEl.style[\"will-change\"] = \"\";\n\n        // Remove classes\n        // ghostClass is added in dragStarted\n        if (moved && !awaitingDragStarted) {\n          toggleClass(\n            dragEl,\n            putSortable\n              ? putSortable.options.ghostClass\n              : this.options.ghostClass,\n            false\n          );\n        }\n        toggleClass(dragEl, this.options.chosenClass, false);\n\n        // Drag stop event\n        _dispatchEvent({\n          sortable: this,\n          name: \"unchoose\",\n          toEl: parentEl,\n          newIndex: null,\n          newDraggableIndex: null,\n          originalEvent: evt,\n        });\n\n        if (rootEl !== parentEl) {\n          if (newIndex >= 0) {\n            // Add event\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: \"add\",\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt,\n            });\n\n            // Remove event\n            _dispatchEvent({\n              sortable: this,\n              name: \"remove\",\n              toEl: parentEl,\n              originalEvent: evt,\n            });\n\n            // drag from one list and drop into another\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: \"sort\",\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt,\n            });\n\n            _dispatchEvent({\n              sortable: this,\n              name: \"sort\",\n              toEl: parentEl,\n              originalEvent: evt,\n            });\n          }\n\n          putSortable && putSortable.save();\n        } else {\n          if (newIndex !== oldIndex) {\n            if (newIndex >= 0) {\n              // drag & drop within the same list\n              _dispatchEvent({\n                sortable: this,\n                name: \"update\",\n                toEl: parentEl,\n                originalEvent: evt,\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: \"sort\",\n                toEl: parentEl,\n                originalEvent: evt,\n              });\n            }\n          }\n        }\n\n        //@ts-ignore\n        if (Sortable.active) {\n          /* jshint eqnull:true */\n          if (newIndex == null || newIndex === -1) {\n            newIndex = oldIndex;\n            newDraggableIndex = oldDraggableIndex;\n          }\n\n          _dispatchEvent({\n            sortable: this,\n            name: \"end\",\n            toEl: parentEl,\n            originalEvent: evt,\n          });\n\n          // Save sorting\n          this.save();\n        }\n      }\n    }\n    this._nulling();\n  },\n\n  _nulling: function () {\n    pluginEvent(\"nulling\", this);\n    //@ts-ignore\n    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n\n    savedInputChecked.forEach(function (el) {\n      el.checked = true;\n    });\n\n    savedInputChecked.length = lastDx = lastDy = 0;\n  },\n\n  handleEvent: function (/**Event*/ evt) {\n    switch (evt.type) {\n      case \"drop\":\n      case \"dragend\":\n        this._onDrop(evt);\n        break;\n\n      case \"dragenter\":\n      case \"dragover\":\n        if (dragEl) {\n          this._onDragOver(evt);\n          _globalDragOver(evt);\n        }\n        break;\n\n      case \"selectstart\":\n        evt.preventDefault();\n        break;\n    }\n  },\n\n  /**\n   * Serializes the item into an array of string.\n   * @returns {String[]}\n   */\n  toArray: function () {\n    let order = [],\n      el,\n      children = this.el.children,\n      i = 0,\n      n = children.length,\n      options = this.options;\n\n    for (; i < n; i++) {\n      el = children[i];\n      if (closest(el, options.draggable, this.el, false)) {\n        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n      }\n    }\n\n    return order;\n  },\n\n  /**\n   * Sorts the elements according to the array.\n   * @param  {String[]}  order  order of the items\n   */\n  sort: function (order) {\n    let items = {},\n      rootEl = this.el;\n\n    this.toArray().forEach(function (id, i) {\n      let el = rootEl.children[i];\n\n      if (closest(el, this.options.draggable, rootEl, false)) {\n        items[id] = el;\n      }\n    }, this);\n\n    order.forEach(function (id) {\n      if (items[id]) {\n        rootEl.removeChild(items[id]);\n        rootEl.appendChild(items[id]);\n      }\n    });\n  },\n\n  /**\n   * Save the current sorting\n   */\n  save: function () {\n    let store = this.options.store;\n    store && store.set && store.set(this);\n  },\n\n  /**\n   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n   * @param   {HTMLElement}  el\n   * @param   {String}       [selector]  default: `options.draggable`\n   * @returns {HTMLElement|null}\n   */\n  closest: function (el, selector) {\n    return closest(el, selector || this.options.draggable, this.el, false);\n  },\n\n  /**\n   * Set/get option\n   * @param   {string} name\n   * @param   {*}      [value]\n   * @returns {*}\n   */\n  option: function (name, value) {\n    let options = this.options;\n\n    if (value === void 0) {\n      return options[name];\n    } else {\n      let modifiedValue = PluginManager.modifyOption(this, name, value);\n      if (typeof modifiedValue !== \"undefined\") {\n        options[name] = modifiedValue;\n      } else {\n        options[name] = value;\n      }\n\n      if (name === \"group\") {\n        _prepareGroup(options);\n      }\n    }\n  },\n\n  /**\n   * Destroy\n   */\n  destroy: function () {\n    pluginEvent(\"destroy\", this);\n    let el = this.el;\n\n    el[expando] = null;\n\n    off(el, \"mousedown\", this._onTapStart);\n    off(el, \"touchstart\", this._onTapStart);\n    off(el, \"pointerdown\", this._onTapStart);\n\n    if (this.nativeDraggable) {\n      off(el, \"dragover\", this);\n      off(el, \"dragenter\", this);\n    }\n    // Remove draggable attributes\n    Array.prototype.forEach.call(el.querySelectorAll(\"[draggable]\"), function (\n      el\n    ) {\n      el.removeAttribute(\"draggable\");\n    });\n\n    this._onDrop();\n\n    this._disableDelayedDragEvents();\n\n    sortables.splice(sortables.indexOf(this.el), 1);\n\n    this.el = el = null;\n  },\n\n  _hideClone: function () {\n    if (!cloneHidden) {\n      pluginEvent(\"hideClone\", this);\n      //@ts-ignore\n      if (Sortable.eventCanceled) return;\n\n      css(cloneEl, \"display\", \"none\");\n      if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n        cloneEl.parentNode.removeChild(cloneEl);\n      }\n      cloneHidden = true;\n    }\n  },\n\n  _showClone: function (putSortable) {\n    if (putSortable.lastPutMode !== \"clone\") {\n      this._hideClone();\n      return;\n    }\n\n    if (cloneHidden) {\n      pluginEvent(\"showClone\", this);\n      //@ts-ignore\n      if (Sortable.eventCanceled) return;\n\n      // show clone at dragEl or original position\n      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      } else if (nextEl) {\n        rootEl.insertBefore(cloneEl, nextEl);\n      } else {\n        rootEl.appendChild(cloneEl);\n      }\n\n      if (this.options.group.revertClone) {\n        this.animate(dragEl, cloneEl);\n      }\n\n      css(cloneEl, \"display\", \"\");\n      cloneHidden = false;\n    }\n  },\n};\n\nfunction _globalDragOver(/**Event*/ evt) {\n  if (evt.dataTransfer) {\n    evt.dataTransfer.dropEffect = \"move\";\n  }\n  evt.cancelable && evt.preventDefault();\n}\n\nfunction onMove(\n  fromEl,\n  toEl,\n  dragEl,\n  dragRect,\n  targetEl,\n  targetRect,\n  originalEvent,\n  willInsertAfter\n) {\n  let evt,\n    sortable = fromEl[expando],\n    onMoveFn = sortable.options.onMove,\n    retVal;\n  // Support for new CustomEvent feature\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(\"move\", {\n      bubbles: true,\n      cancelable: true,\n    });\n  } else {\n    evt = document.createEvent(\"Event\");\n    evt.initEvent(\"move\", true, true);\n  }\n\n  evt.to = toEl;\n  evt.from = fromEl;\n  evt.dragged = dragEl;\n  evt.draggedRect = dragRect;\n  evt.related = targetEl || toEl;\n  //@ts-ignore\n  evt.relatedRect = targetRect || getRect(toEl);\n  evt.willInsertAfter = willInsertAfter;\n\n  evt.originalEvent = originalEvent;\n\n  fromEl.dispatchEvent(evt);\n\n  if (onMoveFn) {\n    retVal = onMoveFn.call(sortable, evt, originalEvent);\n  }\n\n  return retVal;\n}\n\nfunction _disableDraggable(el) {\n  el.draggable = false;\n}\n\nfunction _unsilent() {\n  _silent = false;\n}\n\nfunction _ghostIsLast(evt, vertical, sortable) {\n  //@ts-ignore\n  let rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n  const spacer = 10;\n\n  return vertical\n    ? evt.clientX > rect.right + spacer ||\n        (evt.clientX <= rect.right &&\n          evt.clientY > rect.bottom &&\n          evt.clientX >= rect.left)\n    : (evt.clientX > rect.right && evt.clientY > rect.top) ||\n        (evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer);\n}\n\nfunction _getSwapDirection(\n  evt,\n  target,\n  targetRect,\n  vertical,\n  swapThreshold,\n  invertedSwapThreshold,\n  invertSwap,\n  isLastTarget\n) {\n  let mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n    targetLength = vertical ? targetRect.height : targetRect.width,\n    targetS1 = vertical ? targetRect.top : targetRect.left,\n    targetS2 = vertical ? targetRect.bottom : targetRect.right,\n    invert = false;\n\n  if (!invertSwap) {\n    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n      // check if past first invert threshold on side opposite of lastDirection\n      if (\n        !pastFirstInvertThresh &&\n        (lastDirection === 1\n          ? mouseOnAxis > targetS1 + (targetLength * invertedSwapThreshold) / 2\n          : mouseOnAxis < targetS2 - (targetLength * invertedSwapThreshold) / 2)\n      ) {\n        // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n        pastFirstInvertThresh = true;\n      }\n\n      if (!pastFirstInvertThresh) {\n        // dragEl shadow (target move distance shadow)\n        if (\n          lastDirection === 1\n            ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n            : mouseOnAxis > targetS2 - targetMoveDistance\n        ) {\n          return -lastDirection;\n        }\n      } else {\n        invert = true;\n      }\n    } else {\n      // Regular\n      if (\n        mouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold)) / 2 &&\n        mouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold)) / 2\n      ) {\n        return _getInsertDirection(target);\n      }\n    }\n  }\n\n  invert = invert || invertSwap;\n\n  if (invert) {\n    // Invert of regular\n    if (\n      mouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold) / 2 ||\n      mouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold) / 2\n    ) {\n      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Gets the direction dragEl must be swapped relative to target in order to make it\n * seem that dragEl has been \"inserted\" into that element's position\n * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n * @return {Number}                   Direction dragEl must be swapped\n */\nfunction _getInsertDirection(target) {\n  //@ts-ignore\n  if (index(dragEl) < index(target)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * Generate id\n * @param   {HTMLElement} el\n * @returns {String}\n * @private\n */\nfunction _generateId(el) {\n  let str = el.tagName + el.className + el.src + el.href + el.textContent,\n    i = str.length,\n    sum = 0;\n\n  while (i--) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum.toString(36);\n}\n\nfunction _saveInputCheckedState(root) {\n  savedInputChecked.length = 0;\n\n  let inputs = root.getElementsByTagName(\"input\");\n  let idx = inputs.length;\n\n  while (idx--) {\n    let el = inputs[idx];\n    el.checked && savedInputChecked.push(el);\n  }\n}\n\nfunction _nextTick(fn) {\n  return setTimeout(fn, 0);\n}\n\nfunction _cancelNextTick(id) {\n  return clearTimeout(id);\n}\n\n// Fixed #973:\nif (documentExists) {\n  on(document, \"touchmove\", function (evt) {\n    //@ts-ignore\n    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n      evt.preventDefault();\n    }\n  });\n}\n\n// Export utils\nSortable.utils = {\n  on: on,\n  off: off,\n  css: css,\n  find: find,\n  is: function (el, selector) {\n    return !!closest(el, selector, el, false);\n  },\n  extend: extend,\n  throttle: throttle,\n  closest: closest,\n  toggleClass: toggleClass,\n  clone: clone,\n  index: index,\n  nextTick: _nextTick,\n  cancelNextTick: _cancelNextTick,\n  detectDirection: _detectDirection,\n  getChild: getChild,\n};\n\n/**\n * Get the Sortable instance of an element\n * @param  {HTMLElement} element The element\n * @return {Sortable|undefined}         The instance of Sortable\n */\nSortable.get = function (element) {\n  return element[expando];\n};\n\n/**\n * Mount a plugin to Sortable\n * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n */\nSortable.mount = function (...plugins) {\n  if (plugins[0].constructor === Array) plugins = plugins[0];\n\n  plugins.forEach((plugin) => {\n    if (!plugin.prototype || !plugin.prototype.constructor) {\n      throw `Sortable: Mounted plugin must be a constructor function, not ${{}.toString.call(\n        plugin\n      )}`;\n    }\n    if (plugin.utils) Sortable.utils = { ...Sortable.utils, ...plugin.utils };\n\n    PluginManager.mount(plugin);\n  });\n};\n\n/**\n * Create sortable instance\n * @param {HTMLElement}  el\n * @param {Object}      [options]\n */\nSortable.create = function (el, options) {\n  return new Sortable(el, options);\n};\n\n// Export\nSortable.version = version;\n\nexport default Sortable;\n","import { toggleClass, index } from \"../../../utils/src\";\n\nlet lastSwapEl;\n\nfunction SwapPlugin() {\n  function Swap() {\n    this.defaults = {\n      swapClass: \"sortable-swap-highlight\",\n    };\n  }\n\n  Swap.prototype = {\n    dragStart({ dragEl }) {\n      lastSwapEl = dragEl;\n    },\n    dragOverValid({\n      completed,\n      target,\n      onMove,\n      activeSortable,\n      changed,\n      cancel,\n    }) {\n      if (!activeSortable.options.swap) return;\n      let el = this.sortable.el,\n        options = this.options;\n      if (target && target !== el) {\n        let prevSwapEl = lastSwapEl;\n        if (onMove(target) !== false) {\n          toggleClass(target, options.swapClass, true);\n          lastSwapEl = target;\n        } else {\n          lastSwapEl = null;\n        }\n\n        if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n          toggleClass(prevSwapEl, options.swapClass, false);\n        }\n      }\n      changed();\n\n      completed(true);\n      cancel();\n    },\n    drop({ activeSortable, putSortable, dragEl }) {\n      let toSortable = putSortable || this.sortable;\n      let options = this.options;\n      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n      if (\n        lastSwapEl &&\n        (options.swap || (putSortable && putSortable.options.swap))\n      ) {\n        if (dragEl !== lastSwapEl) {\n          toSortable.captureAnimationState();\n          if (toSortable !== activeSortable)\n            activeSortable.captureAnimationState();\n          swapNodes(dragEl, lastSwapEl);\n\n          toSortable.animateAll();\n          if (toSortable !== activeSortable) activeSortable.animateAll();\n        }\n      }\n    },\n    nulling() {\n      lastSwapEl = null;\n    },\n  };\n\n  return Object.assign(Swap, {\n    pluginName: \"swap\",\n    eventProperties() {\n      return {\n        swapItem: lastSwapEl,\n      };\n    },\n  });\n}\n\nfunction swapNodes(n1, n2) {\n  let p1 = n1.parentNode,\n    p2 = n2.parentNode,\n    i1,\n    i2;\n\n  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n\n  //@ts-ignore\n  i1 = index(n1);\n  //@ts-ignore\n  i2 = index(n2);\n\n  if (p1.isEqualNode(p2) && i1 < i2) {\n    i2++;\n  }\n  p1.insertBefore(n2, p1.children[i1]);\n  p2.insertBefore(n1, p2.children[i2]);\n}\n\nexport default SwapPlugin;\n","import {\n  getRect,\n  css,\n  matrix,\n  isRectEqual,\n  indexOfObject,\n} from \"../../utils/src\";\nimport * as Sortable from \"./Sortable\";\n\nexport default function AnimationStateManager() {\n  let animationStates = [],\n    animationCallbackId;\n\n  return {\n    captureAnimationState() {\n      animationStates = [];\n      if (!this.options.animation) return;\n      let children = [].slice.call(this.el.children);\n\n      children.forEach((child) => {\n        //@ts-ignore\n        if (css(child, \"display\") === \"none\" || child === Sortable.ghost)\n          return;\n        animationStates.push({\n          target: child,\n          //@ts-ignore\n          rect: getRect(child),\n        });\n        let fromRect = { ...animationStates[animationStates.length - 1].rect };\n\n        // If animating: compensate for current animation\n        if (child.thisAnimationDuration) {\n          let childMatrix = matrix(child, true);\n          if (childMatrix) {\n            fromRect.top -= childMatrix.f;\n            fromRect.left -= childMatrix.e;\n          }\n        }\n\n        child.fromRect = fromRect;\n      });\n    },\n\n    addAnimationState(state) {\n      animationStates.push(state);\n    },\n\n    removeAnimationState(target) {\n      animationStates.splice(indexOfObject(animationStates, { target }), 1);\n    },\n\n    animateAll(callback) {\n      if (!this.options.animation) {\n        clearTimeout(animationCallbackId);\n        if (typeof callback === \"function\") callback();\n        return;\n      }\n\n      let animating = false,\n        animationTime = 0;\n\n      animationStates.forEach((state) => {\n        let time = 0,\n          animatingThis = false,\n          target = state.target,\n          fromRect = target.fromRect,\n          //@ts-ignore\n          toRect = getRect(target),\n          prevFromRect = target.prevFromRect,\n          prevToRect = target.prevToRect,\n          animatingRect = state.rect,\n          targetMatrix = matrix(target, true);\n\n        if (targetMatrix) {\n          // Compensate for current animation\n          toRect.top -= targetMatrix.f;\n          toRect.left -= targetMatrix.e;\n        }\n\n        target.toRect = toRect;\n\n        if (target.thisAnimationDuration) {\n          // Could also check if animatingRect is between fromRect and toRect\n          if (\n            isRectEqual(prevFromRect, toRect) &&\n            !isRectEqual(fromRect, toRect) &&\n            // Make sure animatingRect is on line between toRect & fromRect\n            (animatingRect.top - toRect.top) /\n              (animatingRect.left - toRect.left) ===\n              (fromRect.top - toRect.top) / (fromRect.left - toRect.left)\n          ) {\n            // If returning to same place as started from animation and on same axis\n            time = calculateRealTime(\n              animatingRect,\n              prevFromRect,\n              prevToRect,\n              this.options\n            );\n          }\n        }\n\n        // if fromRect != toRect: animate\n        if (!isRectEqual(toRect, fromRect)) {\n          target.prevFromRect = fromRect;\n          target.prevToRect = toRect;\n\n          if (!time) {\n            time = this.options.animation;\n          }\n          this.animate(target, animatingRect, toRect, time);\n        }\n\n        if (time) {\n          animating = true;\n          animationTime = Math.max(animationTime, time);\n          clearTimeout(target.animationResetTimer);\n          target.animationResetTimer = setTimeout(function () {\n            target.animationTime = 0;\n            target.prevFromRect = null;\n            target.fromRect = null;\n            target.prevToRect = null;\n            target.thisAnimationDuration = null;\n          }, time);\n          target.thisAnimationDuration = time;\n        }\n      });\n\n      clearTimeout(animationCallbackId);\n      if (!animating) {\n        if (typeof callback === \"function\") callback();\n      } else {\n        animationCallbackId = setTimeout(function () {\n          if (typeof callback === \"function\") callback();\n        }, animationTime);\n      }\n      animationStates = [];\n    },\n\n    animate(target, currentRect, toRect, duration) {\n      if (duration) {\n        css(target, \"transition\", \"\");\n        css(target, \"transform\", \"\");\n        //@ts-ignore\n        let elMatrix = matrix(this.el),\n          scaleX = elMatrix && elMatrix.a,\n          scaleY = elMatrix && elMatrix.d,\n          translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n          translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n\n        target.animatingX = !!translateX;\n        target.animatingY = !!translateY;\n\n        css(\n          target,\n          \"transform\",\n          \"translate3d(\" + translateX + \"px,\" + translateY + \"px,0)\"\n        );\n\n        this.forRepaintDummy = repaint(target); // repaint\n\n        css(\n          target,\n          \"transition\",\n          \"transform \" +\n            duration +\n            \"ms\" +\n            (this.options.easing ? \" \" + this.options.easing : \"\")\n        );\n        css(target, \"transform\", \"translate3d(0,0,0)\");\n        typeof target.animated === \"number\" && clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          css(target, \"transition\", \"\");\n          css(target, \"transform\", \"\");\n          target.animated = false;\n\n          target.animatingX = false;\n          target.animatingY = false;\n        }, duration);\n      }\n    },\n  };\n}\n\nfunction repaint(target) {\n  return target.offsetWidth;\n}\n\nfunction calculateRealTime(animatingRect, fromRect, toRect, options) {\n  return (\n    (Math.sqrt(\n      Math.pow(fromRect.top - animatingRect.top, 2) +\n        Math.pow(fromRect.left - animatingRect.left, 2)\n    ) /\n      Math.sqrt(\n        Math.pow(fromRect.top - toRect.top, 2) +\n          Math.pow(fromRect.left - toRect.left, 2)\n      )) *\n    options.animation\n  );\n}\n","import {\n  toggleClass,\n  getRect,\n  index,\n  closest,\n  on,\n  off,\n  clone,\n  css,\n  setRect,\n  unsetRect,\n  matrix,\n  expando,\n} from \"../../../utils/src\";\n\nimport dispatchEvent from \"../../../sortable/src/EventDispatcher\";\n\nlet multiDragElements = [],\n  multiDragClones = [],\n  lastMultiDragSelect, // for selection with modifier key down (SHIFT)\n  multiDragSortable,\n  initialFolding = false, // Initial multi-drag fold when drag started\n  folding = false, // Folding any other time\n  dragStarted = false,\n  dragEl,\n  clonesFromRect,\n  clonesHidden;\n\nfunction MultiDragPlugin() {\n  function MultiDrag(sortable) {\n    // Bind all private methods\n    for (let fn in this) {\n      if (fn.charAt(0) === \"_\" && typeof this[fn] === \"function\") {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    if (sortable.options.supportPointer) {\n      on(document, \"pointerup\", this._deselectMultiDrag);\n    } else {\n      on(document, \"mouseup\", this._deselectMultiDrag);\n      on(document, \"touchend\", this._deselectMultiDrag);\n    }\n\n    on(document, \"keydown\", this._checkKeyDown);\n    on(document, \"keyup\", this._checkKeyUp);\n\n    this.defaults = {\n      selectedClass: \"sortable-selected\",\n      multiDragKey: null,\n      setData(dataTransfer, dragEl) {\n        let data = \"\";\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          multiDragElements.forEach((multiDragElement, i) => {\n            data += (!i ? \"\" : \", \") + multiDragElement.textContent;\n          });\n        } else {\n          data = dragEl.textContent;\n        }\n        dataTransfer.setData(\"Text\", data);\n      },\n    };\n  }\n\n  MultiDrag.prototype = {\n    multiDragKeyDown: false,\n    isMultiDrag: false,\n\n    delayStartGlobal({ dragEl: dragged }) {\n      dragEl = dragged;\n    },\n\n    delayEnded() {\n      this.isMultiDrag = ~multiDragElements.indexOf(dragEl);\n    },\n\n    setupClone({ sortable, cancel }) {\n      if (!this.isMultiDrag) return;\n      for (let i = 0; i < multiDragElements.length; i++) {\n        multiDragClones.push(clone(multiDragElements[i]));\n\n        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n\n        multiDragClones[i].draggable = false;\n        multiDragClones[i].style[\"will-change\"] = \"\";\n\n        toggleClass(multiDragClones[i], this.options.selectedClass, false);\n        multiDragElements[i] === dragEl &&\n          toggleClass(multiDragClones[i], this.options.chosenClass, false);\n      }\n\n      sortable._hideClone();\n      cancel();\n    },\n\n    clone({ sortable, rootEl, dispatchSortableEvent, cancel }) {\n      if (!this.isMultiDrag) return;\n      if (!this.options.removeCloneOnHide) {\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          insertMultiDragClones(true, rootEl);\n          dispatchSortableEvent(\"clone\");\n\n          cancel();\n        }\n      }\n    },\n\n    showClone({ cloneNowShown, rootEl, cancel }) {\n      if (!this.isMultiDrag) return;\n      insertMultiDragClones(false, rootEl);\n      multiDragClones.forEach((clone) => {\n        css(clone, \"display\", \"\");\n      });\n\n      cloneNowShown();\n      clonesHidden = false;\n      cancel();\n    },\n\n    hideClone({ sortable, cloneNowHidden, cancel }) {\n      if (!this.isMultiDrag) return;\n      multiDragClones.forEach((clone) => {\n        css(clone, \"display\", \"none\");\n        if (this.options.removeCloneOnHide && clone.parentNode) {\n          clone.parentNode.removeChild(clone);\n        }\n      });\n\n      cloneNowHidden();\n      clonesHidden = true;\n      cancel();\n    },\n\n    dragStartGlobal({ sortable }) {\n      if (!this.isMultiDrag && multiDragSortable) {\n        multiDragSortable.multiDrag._deselectMultiDrag();\n      }\n\n      multiDragElements.forEach((multiDragElement) => {\n        //@ts-ignore\n        multiDragElement.sortableIndex = index(multiDragElement);\n      });\n\n      // Sort multi-drag elements\n      multiDragElements = multiDragElements.sort(function (a, b) {\n        return a.sortableIndex - b.sortableIndex;\n      });\n      dragStarted = true;\n    },\n\n    dragStarted({ sortable }) {\n      if (!this.isMultiDrag) return;\n      if (this.options.sort) {\n        // Capture rects,\n        // hide multi drag elements (by positioning them absolute),\n        // set multi drag elements rects to dragRect,\n        // show multi drag elements,\n        // animate to rects,\n        // unset rects & remove from DOM\n\n        sortable.captureAnimationState();\n\n        if (this.options.animation) {\n          multiDragElements.forEach((multiDragElement) => {\n            if (multiDragElement === dragEl) return;\n            css(multiDragElement, \"position\", \"absolute\");\n          });\n\n          //@ts-ignore\n          let dragRect = getRect(dragEl, false, true, true);\n\n          multiDragElements.forEach((multiDragElement) => {\n            if (multiDragElement === dragEl) return;\n            setRect(multiDragElement, dragRect);\n          });\n\n          folding = true;\n          initialFolding = true;\n        }\n      }\n\n      sortable.animateAll(() => {\n        folding = false;\n        initialFolding = false;\n\n        if (this.options.animation) {\n          multiDragElements.forEach((multiDragElement) => {\n            unsetRect(multiDragElement);\n          });\n        }\n\n        // Remove all auxiliary multidrag items from el, if sorting enabled\n        if (this.options.sort) {\n          removeMultiDragElements();\n        }\n      });\n    },\n\n    dragOver({ target, completed, cancel }) {\n      if (folding && ~multiDragElements.indexOf(target)) {\n        completed(false);\n        cancel();\n      }\n    },\n\n    revert({ fromSortable, rootEl, sortable, dragRect }) {\n      if (multiDragElements.length > 1) {\n        // Setup unfold animation\n        multiDragElements.forEach((multiDragElement) => {\n          sortable.addAnimationState({\n            target: multiDragElement,\n            //@ts-ignore\n            rect: folding ? getRect(multiDragElement) : dragRect,\n          });\n\n          unsetRect(multiDragElement);\n\n          multiDragElement.fromRect = dragRect;\n\n          fromSortable.removeAnimationState(multiDragElement);\n        });\n        folding = false;\n        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n      }\n    },\n\n    dragOverCompleted({\n      sortable,\n      isOwner,\n      insertion,\n      activeSortable,\n      parentEl,\n      putSortable,\n    }) {\n      let options = this.options;\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        }\n\n        initialFolding = false;\n        // If leaving sort:false root, or already folding - Fold to new location\n        if (\n          options.animation &&\n          multiDragElements.length > 1 &&\n          (folding ||\n            (!isOwner && !activeSortable.options.sort && !putSortable))\n        ) {\n          //@ts-ignore\n          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n          let dragRectAbsolute = getRect(dragEl, false, true, true);\n\n          multiDragElements.forEach((multiDragElement) => {\n            if (multiDragElement === dragEl) return;\n            setRect(multiDragElement, dragRectAbsolute);\n\n            // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n            parentEl.appendChild(multiDragElement);\n          });\n\n          folding = true;\n        }\n\n        // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n        if (!isOwner) {\n          // Only remove if not folding (folding will remove them anyways)\n          if (!folding) {\n            removeMultiDragElements();\n          }\n\n          if (multiDragElements.length > 1) {\n            let clonesHiddenBefore = clonesHidden;\n            activeSortable._showClone(sortable);\n\n            // Unfold animation for clones if showing from hidden\n            if (\n              activeSortable.options.animation &&\n              !clonesHidden &&\n              clonesHiddenBefore\n            ) {\n              multiDragClones.forEach((clone) => {\n                activeSortable.addAnimationState({\n                  target: clone,\n                  rect: clonesFromRect,\n                });\n\n                clone.fromRect = clonesFromRect;\n                clone.thisAnimationDuration = null;\n              });\n            }\n          } else {\n            activeSortable._showClone(sortable);\n          }\n        }\n      }\n    },\n\n    dragOverAnimationCapture({ dragRect, isOwner, activeSortable }) {\n      multiDragElements.forEach((multiDragElement) => {\n        multiDragElement.thisAnimationDuration = null;\n      });\n\n      if (\n        activeSortable.options.animation &&\n        !isOwner &&\n        activeSortable.multiDrag.isMultiDrag\n      ) {\n        clonesFromRect = Object.assign({}, dragRect);\n        let dragMatrix = matrix(dragEl, true);\n        clonesFromRect.top -= dragMatrix.f;\n        clonesFromRect.left -= dragMatrix.e;\n      }\n    },\n\n    dragOverAnimationComplete() {\n      if (folding) {\n        folding = false;\n        removeMultiDragElements();\n      }\n    },\n\n    drop({\n      originalEvent: evt,\n      rootEl,\n      parentEl,\n      sortable,\n      dispatchSortableEvent,\n      oldIndex,\n      putSortable,\n    }) {\n      let toSortable = putSortable || this.sortable;\n\n      if (!evt) return;\n\n      let options = this.options,\n        children = parentEl.children;\n\n      // Multi-drag selection\n      if (!dragStarted) {\n        if (options.multiDragKey && !this.multiDragKeyDown) {\n          this._deselectMultiDrag();\n        }\n        toggleClass(\n          dragEl,\n          options.selectedClass,\n          !~multiDragElements.indexOf(dragEl)\n        );\n\n        if (!~multiDragElements.indexOf(dragEl)) {\n          multiDragElements.push(dragEl);\n          dispatchEvent({\n            sortable,\n            rootEl,\n            name: \"select\",\n            targetEl: dragEl,\n            //@ts-ignore\n            originalEvt: evt,\n          });\n\n          // Modifier activated, select from last to dragEl\n          if (\n            evt.shiftKey &&\n            lastMultiDragSelect &&\n            sortable.el.contains(lastMultiDragSelect)\n          ) {\n            //@ts-ignore\n            let lastIndex = index(lastMultiDragSelect),\n              //@ts-ignore\n              currentIndex = index(dragEl);\n\n            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n              // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n              // (but previous selection existed)\n              let n, i;\n              if (currentIndex > lastIndex) {\n                i = lastIndex;\n                n = currentIndex;\n              } else {\n                i = currentIndex;\n                n = lastIndex + 1;\n              }\n\n              for (; i < n; i++) {\n                if (~multiDragElements.indexOf(children[i])) continue;\n                toggleClass(children[i], options.selectedClass, true);\n                multiDragElements.push(children[i]);\n\n                dispatchEvent({\n                  sortable,\n                  rootEl,\n                  name: \"select\",\n                  targetEl: children[i],\n                  //@ts-ignore\n                  originalEvt: evt,\n                });\n              }\n            }\n          } else {\n            lastMultiDragSelect = dragEl;\n          }\n\n          multiDragSortable = toSortable;\n        } else {\n          multiDragElements.splice(multiDragElements.indexOf(dragEl), 1);\n          lastMultiDragSelect = null;\n          dispatchEvent({\n            sortable,\n            rootEl,\n            name: \"deselect\",\n            targetEl: dragEl,\n            //@ts-ignore\n            originalEvt: evt,\n          });\n        }\n      }\n\n      // Multi-drag drop\n      if (dragStarted && this.isMultiDrag) {\n        // Do not \"unfold\" after around dragEl if reverted\n        if (\n          (parentEl[expando].options.sort || parentEl !== rootEl) &&\n          multiDragElements.length > 1\n        ) {\n          //@ts-ignore\n          let dragRect = getRect(dragEl),\n            multiDragIndex = index(\n              dragEl,\n              \":not(.\" + this.options.selectedClass + \")\"\n            );\n\n          if (!initialFolding && options.animation)\n            dragEl.thisAnimationDuration = null;\n\n          toSortable.captureAnimationState();\n\n          if (!initialFolding) {\n            if (options.animation) {\n              dragEl.fromRect = dragRect;\n              multiDragElements.forEach((multiDragElement) => {\n                multiDragElement.thisAnimationDuration = null;\n                if (multiDragElement !== dragEl) {\n                  //@ts-ignore\n                  let rect = folding ? getRect(multiDragElement) : dragRect;\n                  multiDragElement.fromRect = rect;\n\n                  // Prepare unfold animation\n                  toSortable.addAnimationState({\n                    target: multiDragElement,\n                    rect: rect,\n                  });\n                }\n              });\n            }\n\n            // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n            // properly they must all be removed\n            removeMultiDragElements();\n\n            multiDragElements.forEach((multiDragElement) => {\n              if (children[multiDragIndex]) {\n                parentEl.insertBefore(\n                  multiDragElement,\n                  children[multiDragIndex]\n                );\n              } else {\n                parentEl.appendChild(multiDragElement);\n              }\n              multiDragIndex++;\n            });\n\n            // If initial folding is done, the elements may have changed position because they are now\n            // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n            // must be fired here as Sortable will not.\n            //@ts-ignore\n            if (oldIndex === index(dragEl)) {\n              let update = false;\n              multiDragElements.forEach((multiDragElement) => {\n                //@ts-ignore\n                if (\n                  //@ts-ignore\n                  multiDragElement.sortableIndex !== index(multiDragElement)\n                ) {\n                  update = true;\n                  return;\n                }\n              });\n\n              if (update) {\n                dispatchSortableEvent(\"update\");\n              }\n            }\n          }\n\n          // Must be done after capturing individual rects (scroll bar)\n          multiDragElements.forEach((multiDragElement) => {\n            unsetRect(multiDragElement);\n          });\n\n          toSortable.animateAll();\n        }\n\n        multiDragSortable = toSortable;\n      }\n\n      // Remove clones if necessary\n      if (\n        rootEl === parentEl ||\n        (putSortable && putSortable.lastPutMode !== \"clone\")\n      ) {\n        multiDragClones.forEach((clone) => {\n          clone.parentNode && clone.parentNode.removeChild(clone);\n        });\n      }\n    },\n\n    nullingGlobal() {\n      this.isMultiDrag = dragStarted = false;\n      multiDragClones.length = 0;\n    },\n\n    destroyGlobal() {\n      this._deselectMultiDrag();\n      off(document, \"pointerup\", this._deselectMultiDrag);\n      off(document, \"mouseup\", this._deselectMultiDrag);\n      off(document, \"touchend\", this._deselectMultiDrag);\n\n      off(document, \"keydown\", this._checkKeyDown);\n      off(document, \"keyup\", this._checkKeyUp);\n    },\n\n    _deselectMultiDrag(evt) {\n      if (typeof dragStarted !== \"undefined\" && dragStarted) return;\n\n      // Only deselect if selection is in this sortable\n      if (multiDragSortable !== this.sortable) return;\n\n      // Only deselect if target is not item in this sortable\n      if (\n        evt &&\n        closest(evt.target, this.options.draggable, this.sortable.el, false)\n      )\n        return;\n\n      // Only deselect if left click\n      if (evt && evt.button !== 0) return;\n\n      while (multiDragElements.length) {\n        let el = multiDragElements[0];\n        toggleClass(el, this.options.selectedClass, false);\n        multiDragElements.shift();\n        dispatchEvent({\n          sortable: this.sortable,\n          rootEl: this.sortable.el,\n          name: \"deselect\",\n          //@ts-ignore\n          targetEl: el,\n          //@ts-ignore\n          originalEvt: evt,\n        });\n      }\n    },\n\n    _checkKeyDown(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = true;\n      }\n    },\n\n    _checkKeyUp(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = false;\n      }\n    },\n  };\n\n  return Object.assign(MultiDrag, {\n    // Static methods & properties\n    pluginName: \"multiDrag\",\n    utils: {\n      /**\n       * Selects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be selected\n       */\n      select(el) {\n        let sortable = el.parentNode[expando];\n        if (\n          !sortable ||\n          !sortable.options.multiDrag ||\n          ~multiDragElements.indexOf(el)\n        )\n          return;\n        if (multiDragSortable && multiDragSortable !== sortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n          multiDragSortable = sortable;\n        }\n        toggleClass(el, sortable.options.selectedClass, true);\n        multiDragElements.push(el);\n      },\n      /**\n       * Deselects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be deselected\n       */\n      deselect(el) {\n        let sortable = el.parentNode[expando],\n          index = multiDragElements.indexOf(el);\n        if (!sortable || !sortable.options.multiDrag || !~index) return;\n        toggleClass(el, sortable.options.selectedClass, false);\n        multiDragElements.splice(index, 1);\n      },\n    },\n    eventProperties() {\n      const oldIndicies = [],\n        newIndicies = [];\n\n      multiDragElements.forEach((multiDragElement) => {\n        oldIndicies.push({\n          multiDragElement,\n          index: multiDragElement.sortableIndex,\n        });\n\n        // multiDragElements will already be sorted if folding\n        let newIndex;\n        if (folding && multiDragElement !== dragEl) {\n          newIndex = -1;\n        } else if (folding) {\n          newIndex = index(\n            multiDragElement,\n            \":not(.\" + this.options.selectedClass + \")\"\n          );\n        } else {\n          //@ts-ignore\n          newIndex = index(multiDragElement);\n        }\n        newIndicies.push({\n          multiDragElement,\n          index: newIndex,\n        });\n      });\n      return {\n        items: [...multiDragElements],\n        clones: [...multiDragClones],\n        oldIndicies,\n        newIndicies,\n      };\n    },\n    optionListeners: {\n      multiDragKey(key) {\n        key = key.toLowerCase();\n        if (key === \"ctrl\") {\n          key = \"Control\";\n        } else if (key.length > 1) {\n          key = key.charAt(0).toUpperCase() + key.substr(1);\n        }\n        return key;\n      },\n    },\n  });\n}\n\nfunction insertMultiDragElements(clonesInserted, rootEl) {\n  multiDragElements.forEach((multiDragElement, i) => {\n    let target =\n      rootEl.children[\n        multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)\n      ];\n    if (target) {\n      rootEl.insertBefore(multiDragElement, target);\n    } else {\n      rootEl.appendChild(multiDragElement);\n    }\n  });\n}\n\n/**\n * Insert multi-drag clones\n * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\n * @param  {HTMLElement} rootEl\n */\nfunction insertMultiDragClones(elementsInserted, rootEl) {\n  multiDragClones.forEach((clone, i) => {\n    let target =\n      rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n    if (target) {\n      rootEl.insertBefore(clone, target);\n    } else {\n      rootEl.appendChild(clone);\n    }\n  });\n}\n\nfunction removeMultiDragElements() {\n  multiDragElements.forEach((multiDragElement) => {\n    if (multiDragElement === dragEl) return;\n    multiDragElement.parentNode &&\n      multiDragElement.parentNode.removeChild(multiDragElement);\n  });\n}\n\nexport default MultiDragPlugin;\n","import { getChild } from \"../../../utils/src\";\n\nconst drop = function ({\n  originalEvent,\n  putSortable,\n  dragEl,\n  activeSortable,\n  dispatchSortableEvent,\n  hideGhostForTarget,\n  unhideGhostForTarget,\n}) {\n  if (!originalEvent) return;\n  let toSortable = putSortable || activeSortable;\n  hideGhostForTarget();\n  let touch =\n    originalEvent.changedTouches && originalEvent.changedTouches.length\n      ? originalEvent.changedTouches[0]\n      : originalEvent;\n  let target = document.elementFromPoint(touch.clientX, touch.clientY);\n  unhideGhostForTarget();\n  if (toSortable && !toSortable.el.contains(target)) {\n    dispatchSortableEvent(\"spill\");\n    this.onSpill({ dragEl, putSortable });\n  }\n};\n\nfunction Revert() {}\n\nRevert.prototype = {\n  startIndex: null,\n  dragStart({ oldDraggableIndex }) {\n    this.startIndex = oldDraggableIndex;\n  },\n  onSpill({ dragEl, putSortable }) {\n    this.sortable.captureAnimationState();\n    if (putSortable) {\n      putSortable.captureAnimationState();\n    }\n    let nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n    if (nextSibling) {\n      this.sortable.el.insertBefore(dragEl, nextSibling);\n    } else {\n      this.sortable.el.appendChild(dragEl);\n    }\n    this.sortable.animateAll();\n    if (putSortable) {\n      putSortable.animateAll();\n    }\n  },\n  drop,\n};\n\nObject.assign(Revert, {\n  pluginName: \"revertOnSpill\",\n});\n\nfunction Remove() {}\n\nRemove.prototype = {\n  onSpill({ dragEl, putSortable }) {\n    const parentSortable = putSortable || this.sortable;\n    parentSortable.captureAnimationState();\n    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n    parentSortable.animateAll();\n  },\n  drop,\n};\n\nObject.assign(Remove, {\n  pluginName: \"removeOnSpill\",\n});\n\nexport default [Remove, Revert];\n\nexport { Remove as RemoveOnSpill, Revert as RevertOnSpill };\n","import {\n  on,\n  off,\n  css,\n  throttle,\n  cancelThrottle,\n  scrollBy,\n  getParentAutoScrollElement,\n  expando,\n  getRect,\n  getWindowScrollingElement,\n  Edge,\n  IE11OrLess,\n  Safari,\n} from \"../../../utils/src\";\n\nimport Sortable from \"../../../sortable/src/Sortable\";\n\nlet autoScrolls = [],\n  scrollEl,\n  scrollRootEl,\n  scrolling = false,\n  lastAutoScrollX,\n  lastAutoScrollY,\n  touchEvt,\n  pointerElemChangedInterval;\n\nfunction AutoScrollPlugin() {\n  function AutoScroll() {\n    this.defaults = {\n      scroll: true,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      bubbleScroll: true,\n    };\n\n    // Bind all private methods\n    for (let fn in this) {\n      if (fn.charAt(0) === \"_\" && typeof this[fn] === \"function\") {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n  }\n\n  AutoScroll.prototype = {\n    dragStarted({ originalEvent }) {\n      if (this.sortable.nativeDraggable) {\n        on(document, \"dragover\", this._handleAutoScroll);\n      } else {\n        if (this.options.supportPointer) {\n          on(document, \"pointermove\", this._handleFallbackAutoScroll);\n        } else if (originalEvent.touches) {\n          on(document, \"touchmove\", this._handleFallbackAutoScroll);\n        } else {\n          on(document, \"mousemove\", this._handleFallbackAutoScroll);\n        }\n      }\n    },\n\n    dragOverCompleted({ originalEvent }) {\n      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n      if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n        this._handleAutoScroll(originalEvent);\n      }\n    },\n\n    drop() {\n      if (this.sortable.nativeDraggable) {\n        off(document, \"dragover\", this._handleAutoScroll);\n      } else {\n        off(document, \"pointermove\", this._handleFallbackAutoScroll);\n        off(document, \"touchmove\", this._handleFallbackAutoScroll);\n        off(document, \"mousemove\", this._handleFallbackAutoScroll);\n      }\n\n      clearPointerElemChangedInterval();\n      clearAutoScrolls();\n      cancelThrottle();\n    },\n\n    nulling() {\n      touchEvt = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n\n      autoScrolls.length = 0;\n    },\n\n    _handleFallbackAutoScroll(evt) {\n      this._handleAutoScroll(evt, true);\n    },\n\n    _handleAutoScroll(evt, fallback) {\n      const x = (evt.touches ? evt.touches[0] : evt).clientX,\n        y = (evt.touches ? evt.touches[0] : evt).clientY,\n        elem = document.elementFromPoint(x, y);\n\n      touchEvt = evt;\n\n      // IE does not seem to have native autoscroll,\n      // Edge's autoscroll seems too conditional,\n      // MACOS Safari does not have autoscroll,\n      // Firefox and Chrome are good\n      if (fallback || Edge || IE11OrLess || Safari) {\n        //@ts-ignore\n        autoScroll(evt, this.options, elem, fallback);\n\n        // Listener for pointer element change\n        let ogElemScroller = getParentAutoScrollElement(elem, true);\n        if (\n          scrolling &&\n          (!pointerElemChangedInterval ||\n            x !== lastAutoScrollX ||\n            y !== lastAutoScrollY)\n        ) {\n          pointerElemChangedInterval && clearPointerElemChangedInterval();\n          // Detect for pointer elem change, emulating native DnD behaviour\n          pointerElemChangedInterval = setInterval(() => {\n            let newElem = getParentAutoScrollElement(\n              document.elementFromPoint(x, y),\n              true\n            );\n            if (newElem !== ogElemScroller) {\n              ogElemScroller = newElem;\n              clearAutoScrolls();\n            }\n            //@ts-ignore\n            autoScroll(evt, this.options, newElem, fallback);\n          }, 10);\n          lastAutoScrollX = x;\n          lastAutoScrollY = y;\n        }\n      } else {\n        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n        if (\n          !this.options.bubbleScroll ||\n          getParentAutoScrollElement(elem, true) === getWindowScrollingElement()\n        ) {\n          clearAutoScrolls();\n          return;\n        }\n        autoScroll(\n          //@ts-ignore\n          evt,\n          this.options,\n          getParentAutoScrollElement(elem, false),\n          false\n        );\n      }\n    },\n  };\n\n  return Object.assign(AutoScroll, {\n    pluginName: \"scroll\",\n    initializeByDefault: true,\n  });\n}\n\nfunction clearAutoScrolls() {\n  autoScrolls.forEach(function (autoScroll) {\n    clearInterval(autoScroll.pid);\n  });\n  autoScrolls = [];\n}\n\nfunction clearPointerElemChangedInterval() {\n  clearInterval(pointerElemChangedInterval);\n}\n\nconst autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n  if (!options.scroll) return;\n  const x = (evt.touches ? evt.touches[0] : evt).clientX,\n    y = (evt.touches ? evt.touches[0] : evt).clientY,\n    sens = options.scrollSensitivity,\n    speed = options.scrollSpeed,\n    winScroller = getWindowScrollingElement();\n\n  let scrollThisInstance = false,\n    scrollCustomFn;\n\n  // New scroll root, set scrollEl\n  if (scrollRootEl !== rootEl) {\n    scrollRootEl = rootEl;\n\n    clearAutoScrolls();\n\n    scrollEl = options.scroll;\n    scrollCustomFn = options.scrollFn;\n\n    if (scrollEl === true) {\n      scrollEl = getParentAutoScrollElement(rootEl, true);\n    }\n  }\n\n  let layersOut = 0;\n  let currentParent = scrollEl;\n  do {\n    let el = currentParent,\n      //@ts-ignore\n      rect = getRect(el),\n      top = rect.top,\n      bottom = rect.bottom,\n      left = rect.left,\n      right = rect.right,\n      width = rect.width,\n      height = rect.height,\n      canScrollX,\n      canScrollY,\n      scrollWidth = el.scrollWidth,\n      scrollHeight = el.scrollHeight,\n      //@ts-ignore\n      elCSS = css(el),\n      scrollPosX = el.scrollLeft,\n      scrollPosY = el.scrollTop;\n\n    if (el === winScroller) {\n      canScrollX =\n        width < scrollWidth &&\n        (elCSS.overflowX === \"auto\" ||\n          elCSS.overflowX === \"scroll\" ||\n          elCSS.overflowX === \"visible\");\n      canScrollY =\n        height < scrollHeight &&\n        (elCSS.overflowY === \"auto\" ||\n          elCSS.overflowY === \"scroll\" ||\n          elCSS.overflowY === \"visible\");\n    } else {\n      canScrollX =\n        width < scrollWidth &&\n        (elCSS.overflowX === \"auto\" || elCSS.overflowX === \"scroll\");\n      canScrollY =\n        height < scrollHeight &&\n        (elCSS.overflowY === \"auto\" || elCSS.overflowY === \"scroll\");\n    }\n\n    let vx =\n      canScrollX &&\n      //@ts-ignore\n      (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) -\n        //@ts-ignore\n        (Math.abs(left - x) <= sens && !!scrollPosX);\n    let vy =\n      canScrollY &&\n      //@ts-ignore\n      (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) -\n        //@ts-ignore\n        (Math.abs(top - y) <= sens && !!scrollPosY);\n\n    if (!autoScrolls[layersOut]) {\n      for (let i = 0; i <= layersOut; i++) {\n        if (!autoScrolls[i]) {\n          autoScrolls[i] = {};\n        }\n      }\n    }\n\n    if (\n      autoScrolls[layersOut].vx != vx ||\n      autoScrolls[layersOut].vy != vy ||\n      autoScrolls[layersOut].el !== el\n    ) {\n      autoScrolls[layersOut].el = el;\n      autoScrolls[layersOut].vx = vx;\n      autoScrolls[layersOut].vy = vy;\n\n      clearInterval(autoScrolls[layersOut].pid);\n\n      if (vx != 0 || vy != 0) {\n        scrollThisInstance = true;\n        /* jshint loopfunc:true */\n        autoScrolls[layersOut].pid = setInterval(\n          function () {\n            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n            if (isFallback && this.layer === 0) {\n              //@ts-ignore\n              Sortable.active._onTouchMove(touchEvt); // To move ghost if it is positioned absolutely\n            }\n            let scrollOffsetY = autoScrolls[this.layer].vy\n              ? autoScrolls[this.layer].vy * speed\n              : 0;\n            let scrollOffsetX = autoScrolls[this.layer].vx\n              ? autoScrolls[this.layer].vx * speed\n              : 0;\n\n            if (typeof scrollCustomFn === \"function\") {\n              if (\n                scrollCustomFn.call(\n                  //@ts-ignore\n                  Sortable.dragged.parentNode[expando],\n                  scrollOffsetX,\n                  scrollOffsetY,\n                  evt,\n                  touchEvt,\n                  autoScrolls[this.layer].el\n                ) !== \"continue\"\n              ) {\n                return;\n              }\n            }\n\n            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n          }.bind({ layer: layersOut }),\n          24\n        );\n      }\n    }\n    layersOut++;\n  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n}, 30);\n\nexport default AutoScrollPlugin;\n","import Sortable from \"../../sortable/src/Sortable\";\nimport Swap from \"../../plugins/swap/src\";\nimport MultiDrag from \"../../plugins/multi-drag/src\";\nimport { RemoveOnSpill, RevertOnSpill } from \"../../plugins/on-spill/src\";\nimport AutoScroll from \"../../plugins/auto-scroll/src\";\n\n//@ts-ignore\nSortable.mount(new AutoScroll());\nSortable.mount(RemoveOnSpill, RevertOnSpill);\n//@ts-ignore\nSortable.mount(new Swap());\n//@ts-ignore\nSortable.mount(new MultiDrag());\n\nexport default Sortable;\nexport { Sortable };\n"],"sourceRoot":""}